openapi: 3.0.3
info:
  title: Ottu API
  version: 1.0.0
  description: Ottu API
paths:
  /b/api/v1/unified-ui/invoice/:
    get:
      operationId: api_v1_unified_ui_invoice_list
      description: Invoice details to be used for invoice detail page on the frontend
        dashboard
      summary: Retrieve a list of Invoices
      parameters:
      - name: cursor
        required: false
        in: query
        description: The pagination cursor value.
        schema:
          type: string
      - in: query
        name: due_date_after
        schema:
          type: string
          format: date
        description: 'Range: due_date_after:YYYY-MM-DD, due_date_before:YYYY-MM-DD'
      - in: query
        name: due_date_before
        schema:
          type: string
          format: date
        description: 'Range: due_date_after:YYYY-MM-DD, due_date_before:YYYY-MM-DD'
      - in: query
        name: invoice_date_after
        schema:
          type: string
          format: date
        description: 'Range: invoice_date_after:YYYY-MM-DD, invoice_date_before:YYYY-MM-DD'
      - in: query
        name: invoice_date_before
        schema:
          type: string
          format: date
        description: 'Range: invoice_date_after:YYYY-MM-DD, invoice_date_before:YYYY-MM-DD'
      - in: query
        name: is_active
        schema:
          type: boolean
      - name: per_page
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: status
        schema:
          type: string
          enum:
          - canceled
          - overdue
          - paid
          - sent
        description: |-
          Current status of the invoice. Can be one of the following: `sent`, `paid`, `overdue`, `canceled`.

          * `sent` - Sent
          * `paid` - Paid
          * `overdue` - Overdue
          * `canceled` - Canceled
      tags:
      - Unified UI
      security:
      - SSO JWT Auth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUnifiedUIInvoiceList'
          description: ''
  /b/api/v1/unified-ui/invoice/{txn__session_id}/:
    get:
      operationId: api_v1_unified_ui_invoice_retrieve
      description: This view is used to view the invoice for internal dashboard.
      summary: Retrieve an Invoice item
      parameters:
      - in: path
        name: txn__session_id
        schema:
          type: string
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
        required: true
      tags:
      - Unified UI
      security:
      - SSO JWT Auth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedUIInvoice'
          description: ''
  /b/api/v1/unified-ui/payment/{type}/{session_id}/:
    get:
      operationId: get_payment_details
      description: Payment transaction details to be used for payment detail page
        on the frontend dashboard
      summary: Retrieve the payment transaction details
      parameters:
      - in: path
        name: session_id
        schema:
          type: string
        required: true
      - in: path
        name: type
        schema:
          type: string
        required: true
      tags:
      - Unified UI
      security:
      - SSO JWT Auth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
  /b/checkout/api/sdk/v1/apay/pay/:
    post:
      operationId: post_pay_apple_pay
      description: Submit an Apple Pay payment once received the `token` from ApplePay.
      summary: Submit an Apple Pay payment
      tags:
      - Checkout SDK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayApplePay'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PayApplePay'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PayApplePay'
        required: true
      security:
      - Api-Key Authentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePayViewSuccessResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplePayPayRejectedResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
  /b/checkout/api/sdk/v1/apay/validate-session/:
    post:
      operationId: post_validate_apple_pay_session
      description: Validate session for device eligibility and payment request accuracy.
      summary: Validate Apple Pay session
      tags:
      - Checkout SDK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayApplePay'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PayApplePay'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PayApplePay'
        required: true
      security:
      - Api-Key Authentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplePaySuccessSessionValidationResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplePaySessionValidationErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
  /b/checkout/api/sdk/v1/gpay/pay/:
    post:
      operationId: post_pay_google_pay
      description: Submit a Google Pay payment once received the `paymentData` from
        GooglePay.
      summary: Submit a Google Pay payment
      tags:
      - Checkout SDK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayGooglePay'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PayGooglePay'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PayGooglePay'
        required: true
      security:
      - Api-Key Authentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePayView'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GooglePayPayRejectedResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
  /b/checkout/api/sdk/v1/pymt-txn/submit/{session_id}/:
    get:
      operationId: initiate_checkout_sdk
      description: The payment details to be used for initiating a checkout process
        using the Checkout SDK.
      summary: Retrieve init data
      parameters:
      - in: path
        name: session_id
        schema:
          type: string
          pattern: ^[-\w]+$
        required: true
      tags:
      - Checkout SDK
      security:
      - SSO BasicAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutSDKResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
  /b/checkout/api/sdk/v1/stcpay/pay/:
    post:
      operationId: stc_pay_checkout_sdk_capture
      description: " \n            The Capture endpoint is responsible for processing\
        \ capture requests to STC pay.\n            It accepts the session ID and\
        \ OTP (One-Time Password) as input parameters.\n            The endpoint performs\
        \ a capture request to STC pay\n            and handles the transaction state\
        \ based on the response from the payment gateway.\n        "
      summary: Submit STC Pay OTP
      tags:
      - Checkout SDK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitSTCPaymentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubmitSTCPaymentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubmitSTCPaymentRequest'
        required: true
      security:
      - SSO JWT Auth: []
      - jwtAuth: []
      - tokenAuth: []
      - basicAuth: []
      - SSO BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/STCPayRejectedResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
  /b/checkout/api/sdk/v1/stcpay/submit/:
    post:
      operationId: stc_pay_checkout_sdk_authorize
      description: "\n            To initiate a payment using the SDK for STC pay\
        \ Payment,\n            you are required to submit the customer's phone number\n\
        \            and indicate whether to enable the option to save the card for\
        \ future use.        \n        "
      summary: Submit STC Pay payment method
      tags:
      - Checkout SDK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/STCAuthorizePayment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/STCAuthorizePayment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/STCAuthorizePayment'
      security:
      - SSO JWT Auth: []
      - jwtAuth: []
      - tokenAuth: []
      - basicAuth: []
      - SSO BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentAuthorize'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/STCPayPaymentRejectedResponse'
          description: ''
  /b/checkout/api/sdk/v1/submit-token/:
    post:
      operationId: submit_token_payment_method
      description: Use the Pay with Token Endpoint to process a payment with a saved
        card token.
      summary: Submit token payment method
      tags:
      - Checkout SDK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitToken'
        required: true
      security:
      - SSO JWT Auth: []
      - jwtAuth: []
      - tokenAuth: []
      - basicAuth: []
      - SSO BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SDKSubmitTokenResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldErrors'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
  /b/checkout/api/sdk/v1/submit/{session_id}/:
    post:
      operationId: submit_redirect_payment_method
      description: Submit the payment method customer has selected on the SDK and
        in return get the PG url where the user can be redirected to perform the payment.
      summary: Submit redirect payment method
      parameters:
      - in: path
        name: session_id
        schema:
          type: string
          pattern: ^[-\w]+$
        required: true
      tags:
      - Checkout SDK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutSubmit'
        required: true
      security:
      - SSO JWT Auth: []
      - jwtAuth: []
      - tokenAuth: []
      - basicAuth: []
      - SSO BasicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SDKSubmitRedirectResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldErrors'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
  /b/checkout/v1/pymt-txn/:
    post:
      operationId: create_payment_transaction_checkout
      description: Create a new Payment Transaction
      summary: Create a new Payment Transaction
      tags:
      - Checkout API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutPOSTRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CheckoutPOSTRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CheckoutPOSTRequest'
        required: true
      security:
      - SSO BasicAuth: []
      - basicAuth: []
      - SSO JWT Auth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutPOSTResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErrors'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '415':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '423':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
  /b/invoice/v1/invoice/:
    post:
      operationId: create_invoice
      description: Create a new Invoice
      summary: Create a new Invoice
      tags:
      - Invoice API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoicePOSTRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InvoicePOSTRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InvoicePOSTRequest'
        required: true
      security:
      - SSO BasicAuth: []
      - basicAuth: []
      - SSO JWT Auth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicePOSTResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceClientErrors'
          description: ''
  /b/op/attempt/{session_id}:
    post:
      operationId: create_attempt_pymt_txn_for_ottu_pg
      description: demo
      summary: Fetch Ottu session data
      parameters:
      - in: path
        name: session_id
        schema:
          type: string
        required: true
      tags:
      - Ottu PG
      security:
      - SSO JWT Auth: []
      - jwtAuth: []
      - tokenAuth: []
      - basicAuth: []
      - SSO BasicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OttuPGPymtTxn'
          description: ''
  /b/pbl/v2/auto-debit/:
    post:
      operationId: auto_debit
      description: "This endpoint will take a session id and check for it's related\
        \ payment if it's possible to be auto charged  or not. <br/> if possible it\
        \ will charge the payment and return the operation response. <br/> \U0001F4DD\
        \ **NOTE** Optional fields may not be represented in response body.\n    \
        \    "
      summary: Auto debit endpoint for auto debit payment flow
      tags:
      - Auto Debit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutoDebit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AutoDebit'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AutoDebit'
        required: true
      security:
      - SSO BasicAuth: []
      - basicAuth: []
      - SSO JWT Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaWebhook'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutoDebitErrors'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
  /b/pbl/v2/card/:
    post:
      operationId: get_user_cards
      description: This endpoint retrieves a list of cards saved by the customer.
        The response includes details such as the card's masked number, card type,
        and expiration date. By using this endpoint, you can provide the customer
        with an overview of their saved cards for future payments.
      summary: Retrieve a list of saved cards for the customer.
      tags:
      - User Cards
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCards'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCards'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCards'
        required: true
      security:
      - SSO BasicAuth: []
      - basicAuth: []
      - SSO JWT Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardErrors'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '415':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
  /b/pbl/v2/card/{token}/:
    delete:
      operationId: delete_user_cards
      description: This endpoint allows you to delete a customer's saved card from
        the system. Provide the unique card identifier to remove the card from the
        customer's saved cards list. This action can help maintain up-to-date card
        information and ensure that customers do not accidentally use expired or unwanted
        cards for payments.
      summary: Delete a saved card for the customer.
      parameters:
      - in: path
        name: customer_id
        schema:
          type: string
        description: Utilized to retrieve cards associated with a specific customer
          using their unique customer_id..
        required: true
      - in: path
        name: token
        schema:
          type: string
        description: The unique token associated with the card to be deleted.
        required: true
      - in: path
        name: type
        schema:
          type: string
        description: Choose between `sandbox` and `production`. Select sandbox to
          retrieve cards created for test Payment Gateway MIDs, or production to fetch
          real cards used in live transactions.
        required: true
      tags:
      - User Cards
      security:
      - SSO BasicAuth: []
      - basicAuth: []
      - SSO JWT Auth: []
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardErrors'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '415':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
  /b/pbl/v2/cash-payment/:
    post:
      operationId: cash_payment_acknowledgement
      description: Endpoint for handling cash payment acknowledgement requests <br/>
        📝 **NOTE** Optional fields may not be represented in response body.
      summary: Cash Payment.
      tags:
      - CashPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CashPayment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CashPayment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CashPayment'
        required: true
      security:
      - basicAuth: []
      - SSO BasicAuth: []
      - SSO JWT Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaWebhook'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cash acknowledgement Errors'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
  /b/pbl/v2/inquiry/:
    post:
      operationId: inquiry
      description: "The Check Status-Inquiry endpoint is part of our Payment Gateway\
        \ API. It's designed for checking the status of a specific payment transaction.\
        \ This endpoint is particularly useful when notifications about a transaction\
        \ status change haven't been received. It acts as a manual check for confirming\
        \ the payment status, mirroring the structure of a payment webhook notification.\
        \ \n\nThe Inquiry operation can only be triggered for payment transactions\
        \ in the `pending`, `attempted`, `failed`, or `expired` states. If the transaction\
        \ state is already `paid` or `authorized`, the response is returned immediately\
        \ without re-confirming it with third-party Payment Gateways (PGs). However,\
        \ if the system isn't up to date and the transaction state is still in one\
        \ of the mentioned states, Ottu will trigger an API call to the PG to update\
        \ the transaction state. If multiple payment options were attempted using\
        \ different PGs, all PGs supporting payment status checks will be called,\
        \ ensuring the merchant receives the most updated status of the payment. \n\
        \nThis endpoint uses a throttling mechanism to prevent potential system abuse.\
        \ Throttling rules are as follows:\n\n1. **Initial Grace Period (10 minutes):**\
        \ If the Inquiry endpoint is called within 10 minutes from when the payment\
        \ transaction is created, the request will be throttled.\n\n2. **First Request:**\
        \ Once the initial grace period has passed, the first request is allowed.\
        \ Subsequent requests for the same transaction within the next 30 minutes\
        \ will be throttled.\n\n3. **Second Request:** After the end of the first\
        \ throttle period, a second request is permitted. Further requests for the\
        \ same transaction within another 30 minutes from the second request are throttled.\n\
        \n4. **Subsequent Requests:** If the number of requests for the same transaction\
        \ exceeds three within the overall time frame, any further requests are denied.\n\
        \nNote: The above rules are applied per transaction. Additionally, the endpoint\
        \ allows a maximum of 30 requests per minute across all transactions.\n\n\
        It's mandatory to provide at least one of the identifiers (`session_id` or\
        \ `order_no`)."
      summary: Check Status-Inquiry
      tags:
      - Payment Operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InquiryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InquiryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InquiryRequest'
      security:
      - SSO BasicAuth: []
      - basicAuth: []
      - SSO JWT Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaWebhook'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InquiryErrors'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '415':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
  /b/pbl/v2/operation/:
    post:
      operationId: public_operations
      description: |+
        The Payment Operations API provides an interface to manage your payment transactions beyond their initial creation. It allows for several operations including `refund`, `capture`, `void`, and others, directly syncing with the Payment Gateway (PG) for certain actions to ensure consistency across systems.

        Two key identifiers, `order_no` and `session_id`, can be used interchangeably to specify the payment transaction that the operation should be applied to.

        For operations such as `refund` and `capture`, you can optionally define the `amount` to be actioned. If not provided, the API will attempt to perform the operation on the full amount, or the remaining amount if previous operations were conducted. However, note that for `void`, the operation always applies to the full amount, ignoring the `amount` value if provided.

        This API also allows you to perform certain operations solely at the Ottu system level, providing increased control over your payment transactions.

        For every operation, the API provides a clear response containing information about the executed operation, a user-friendly message (`detail`), and the operation's result (`success` indicates a successful operation).

      summary: Operations
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
          default: Api-Key vSUmxsXx.V81oYvOWFMcIywaOu57Utx6VSCmG11lo
        description: Private API key to be provided in the format `Api-Key <key>`.
        required: true
      tags:
      - Payment Operations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Operation'
            examples:
              Expire:
                value:
                  session_id: <add `session_id` here>
                  operation: expire
              Refund:
                value:
                  session_id: <add `session_id` here>
                  operation: refund
                  amount: '100.000'
                summary: Refund
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Operation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Operation'
        required: true
      security:
      - SSO BasicAuth: []
      - basicAuth: []
      - SSO JWT Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentOperationResponses'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentOperationErrors'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
  /b/pbl/v2/payment-methods/:
    post:
      operationId: get_payment_methods
      description: This endpoint allows you to retrieve the available payment methods
        for a specific plugin, operation and customer. You can specify the desired
        filter field to get a list of payment methods that are supported and accessible.
      summary: Retrieve a list of payment methods based on filter values.
      tags:
      - PaymentMethods API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethodsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PaymentMethodsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PaymentMethodsRequest'
        required: true
      security:
      - SSO BasicAuth: []
      - basicAuth: []
      - SSO JWT Auth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldErrors'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
          description: ''
components:
  schemas:
    Address:
      type: object
      description: Nested serializer to save Address data into PaymentTransaction
      properties:
        line1:
          type: string
          maxLength: 128
        line2:
          type: string
          maxLength: 128
        city:
          type: string
          maxLength: 40
        state:
          type: string
          maxLength: 40
        country:
          enum:
          - AW
          - AF
          - AO
          - AI
          - AX
          - AL
          - AD
          - AE
          - AR
          - AM
          - AS
          - AQ
          - TF
          - AG
          - AU
          - AT
          - AZ
          - BI
          - BE
          - BJ
          - BQ
          - BF
          - BD
          - BG
          - BH
          - BS
          - BA
          - BL
          - BY
          - BZ
          - BM
          - BO
          - BR
          - BB
          - BN
          - BT
          - BV
          - BW
          - CF
          - CA
          - CC
          - CH
          - CL
          - CN
          - CI
          - CM
          - CD
          - CG
          - CK
          - CO
          - KM
          - CV
          - CR
          - CU
          - CW
          - CX
          - KY
          - CY
          - CZ
          - DE
          - DJ
          - DM
          - DK
          - DO
          - DZ
          - EC
          - EG
          - ER
          - EH
          - ES
          - EE
          - ET
          - FI
          - FJ
          - FK
          - FR
          - FO
          - FM
          - GA
          - GB
          - GE
          - GG
          - GH
          - GI
          - GN
          - GP
          - GM
          - GW
          - GQ
          - GR
          - GD
          - GL
          - GT
          - GF
          - GU
          - GY
          - HK
          - HM
          - HN
          - HR
          - HT
          - HU
          - ID
          - IM
          - IN
          - IO
          - IE
          - IR
          - IQ
          - IS
          - IL
          - IT
          - JM
          - JE
          - JO
          - JP
          - KZ
          - KE
          - KG
          - KH
          - KI
          - KN
          - KR
          - KW
          - LA
          - LB
          - LR
          - LY
          - LC
          - LI
          - LK
          - LS
          - LT
          - LU
          - LV
          - MO
          - MF
          - MA
          - MC
          - MD
          - MG
          - MV
          - MX
          - MH
          - MK
          - ML
          - MT
          - MM
          - ME
          - MN
          - MP
          - MZ
          - MR
          - MS
          - MQ
          - MU
          - MW
          - MY
          - YT
          - NA
          - NC
          - NE
          - NF
          - NG
          - NI
          - NU
          - NL
          - 'NO'
          - NP
          - NR
          - NZ
          - OM
          - PK
          - PA
          - PN
          - PE
          - PH
          - PW
          - PG
          - PL
          - PR
          - KP
          - PT
          - PY
          - PS
          - PF
          - QA
          - RE
          - RO
          - RU
          - RW
          - SA
          - SD
          - SN
          - SG
          - GS
          - SH
          - SJ
          - SB
          - SL
          - SV
          - SM
          - SO
          - PM
          - RS
          - SS
          - ST
          - SR
          - SK
          - SI
          - SE
          - SZ
          - SX
          - SC
          - SY
          - TC
          - TD
          - TG
          - TH
          - TJ
          - TK
          - TM
          - TL
          - TO
          - TT
          - TN
          - TR
          - TV
          - TW
          - TZ
          - UG
          - UA
          - UM
          - UY
          - US
          - UZ
          - VA
          - VC
          - VE
          - VG
          - VI
          - VN
          - VU
          - WF
          - WS
          - YE
          - ZA
          - ZM
          - ZW
          type: string
          description: |-
            * `AW` - Aruba
            * `AF` - Afghanistan
            * `AO` - Angola
            * `AI` - Anguilla
            * `AX` - Åland Islands
            * `AL` - Albania
            * `AD` - Andorra
            * `AE` - United Arab Emirates
            * `AR` - Argentina
            * `AM` - Armenia
            * `AS` - American Samoa
            * `AQ` - Antarctica
            * `TF` - French Southern Territories
            * `AG` - Antigua and Barbuda
            * `AU` - Australia
            * `AT` - Austria
            * `AZ` - Azerbaijan
            * `BI` - Burundi
            * `BE` - Belgium
            * `BJ` - Benin
            * `BQ` - Bonaire, Sint Eustatius and Saba
            * `BF` - Burkina Faso
            * `BD` - Bangladesh
            * `BG` - Bulgaria
            * `BH` - Bahrain
            * `BS` - Bahamas
            * `BA` - Bosnia and Herzegovina
            * `BL` - Saint Barthélemy
            * `BY` - Belarus
            * `BZ` - Belize
            * `BM` - Bermuda
            * `BO` - Bolivia, Plurinational State of
            * `BR` - Brazil
            * `BB` - Barbados
            * `BN` - Brunei Darussalam
            * `BT` - Bhutan
            * `BV` - Bouvet Island
            * `BW` - Botswana
            * `CF` - Central African Republic
            * `CA` - Canada
            * `CC` - Cocos (Keeling) Islands
            * `CH` - Switzerland
            * `CL` - Chile
            * `CN` - China
            * `CI` - Côte d'Ivoire
            * `CM` - Cameroon
            * `CD` - Congo, The Democratic Republic of the
            * `CG` - Congo
            * `CK` - Cook Islands
            * `CO` - Colombia
            * `KM` - Comoros
            * `CV` - Cabo Verde
            * `CR` - Costa Rica
            * `CU` - Cuba
            * `CW` - Curaçao
            * `CX` - Christmas Island
            * `KY` - Cayman Islands
            * `CY` - Cyprus
            * `CZ` - Czechia
            * `DE` - Germany
            * `DJ` - Djibouti
            * `DM` - Dominica
            * `DK` - Denmark
            * `DO` - Dominican Republic
            * `DZ` - Algeria
            * `EC` - Ecuador
            * `EG` - Egypt
            * `ER` - Eritrea
            * `EH` - Western Sahara
            * `ES` - Spain
            * `EE` - Estonia
            * `ET` - Ethiopia
            * `FI` - Finland
            * `FJ` - Fiji
            * `FK` - Falkland Islands (Malvinas)
            * `FR` - France
            * `FO` - Faroe Islands
            * `FM` - Micronesia, Federated States of
            * `GA` - Gabon
            * `GB` - United Kingdom
            * `GE` - Georgia
            * `GG` - Guernsey
            * `GH` - Ghana
            * `GI` - Gibraltar
            * `GN` - Guinea
            * `GP` - Guadeloupe
            * `GM` - Gambia
            * `GW` - Guinea-Bissau
            * `GQ` - Equatorial Guinea
            * `GR` - Greece
            * `GD` - Grenada
            * `GL` - Greenland
            * `GT` - Guatemala
            * `GF` - French Guiana
            * `GU` - Guam
            * `GY` - Guyana
            * `HK` - Hong Kong
            * `HM` - Heard Island and McDonald Islands
            * `HN` - Honduras
            * `HR` - Croatia
            * `HT` - Haiti
            * `HU` - Hungary
            * `ID` - Indonesia
            * `IM` - Isle of Man
            * `IN` - India
            * `IO` - British Indian Ocean Territory
            * `IE` - Ireland
            * `IR` - Iran, Islamic Republic of
            * `IQ` - Iraq
            * `IS` - Iceland
            * `IL` - Israel
            * `IT` - Italy
            * `JM` - Jamaica
            * `JE` - Jersey
            * `JO` - Jordan
            * `JP` - Japan
            * `KZ` - Kazakhstan
            * `KE` - Kenya
            * `KG` - Kyrgyzstan
            * `KH` - Cambodia
            * `KI` - Kiribati
            * `KN` - Saint Kitts and Nevis
            * `KR` - Korea, Republic of
            * `KW` - Kuwait
            * `LA` - Lao People's Democratic Republic
            * `LB` - Lebanon
            * `LR` - Liberia
            * `LY` - Libya
            * `LC` - Saint Lucia
            * `LI` - Liechtenstein
            * `LK` - Sri Lanka
            * `LS` - Lesotho
            * `LT` - Lithuania
            * `LU` - Luxembourg
            * `LV` - Latvia
            * `MO` - Macao
            * `MF` - Saint Martin (French part)
            * `MA` - Morocco
            * `MC` - Monaco
            * `MD` - Moldova, Republic of
            * `MG` - Madagascar
            * `MV` - Maldives
            * `MX` - Mexico
            * `MH` - Marshall Islands
            * `MK` - North Macedonia
            * `ML` - Mali
            * `MT` - Malta
            * `MM` - Myanmar
            * `ME` - Montenegro
            * `MN` - Mongolia
            * `MP` - Northern Mariana Islands
            * `MZ` - Mozambique
            * `MR` - Mauritania
            * `MS` - Montserrat
            * `MQ` - Martinique
            * `MU` - Mauritius
            * `MW` - Malawi
            * `MY` - Malaysia
            * `YT` - Mayotte
            * `NA` - Namibia
            * `NC` - New Caledonia
            * `NE` - Niger
            * `NF` - Norfolk Island
            * `NG` - Nigeria
            * `NI` - Nicaragua
            * `NU` - Niue
            * `NL` - Netherlands
            * `NO` - Norway
            * `NP` - Nepal
            * `NR` - Nauru
            * `NZ` - New Zealand
            * `OM` - Oman
            * `PK` - Pakistan
            * `PA` - Panama
            * `PN` - Pitcairn
            * `PE` - Peru
            * `PH` - Philippines
            * `PW` - Palau
            * `PG` - Papua New Guinea
            * `PL` - Poland
            * `PR` - Puerto Rico
            * `KP` - Korea, Democratic People's Republic of
            * `PT` - Portugal
            * `PY` - Paraguay
            * `PS` - Palestine, State of
            * `PF` - French Polynesia
            * `QA` - Qatar
            * `RE` - Réunion
            * `RO` - Romania
            * `RU` - Russian Federation
            * `RW` - Rwanda
            * `SA` - Saudi Arabia
            * `SD` - Sudan
            * `SN` - Senegal
            * `SG` - Singapore
            * `GS` - South Georgia and the South Sandwich Islands
            * `SH` - Saint Helena, Ascension and Tristan da Cunha
            * `SJ` - Svalbard and Jan Mayen
            * `SB` - Solomon Islands
            * `SL` - Sierra Leone
            * `SV` - El Salvador
            * `SM` - San Marino
            * `SO` - Somalia
            * `PM` - Saint Pierre and Miquelon
            * `RS` - Serbia
            * `SS` - South Sudan
            * `ST` - Sao Tome and Principe
            * `SR` - Suriname
            * `SK` - Slovakia
            * `SI` - Slovenia
            * `SE` - Sweden
            * `SZ` - Eswatini
            * `SX` - Sint Maarten (Dutch part)
            * `SC` - Seychelles
            * `SY` - Syrian Arab Republic
            * `TC` - Turks and Caicos Islands
            * `TD` - Chad
            * `TG` - Togo
            * `TH` - Thailand
            * `TJ` - Tajikistan
            * `TK` - Tokelau
            * `TM` - Turkmenistan
            * `TL` - Timor-Leste
            * `TO` - Tonga
            * `TT` - Trinidad and Tobago
            * `TN` - Tunisia
            * `TR` - Turkey
            * `TV` - Tuvalu
            * `TW` - Taiwan, Province of China
            * `TZ` - Tanzania, United Republic of
            * `UG` - Uganda
            * `UA` - Ukraine
            * `UM` - United States Minor Outlying Islands
            * `UY` - Uruguay
            * `US` - United States
            * `UZ` - Uzbekistan
            * `VA` - Holy See (Vatican City State)
            * `VC` - Saint Vincent and the Grenadines
            * `VE` - Venezuela, Bolivarian Republic of
            * `VG` - Virgin Islands, British
            * `VI` - Virgin Islands, U.S.
            * `VN` - Viet Nam
            * `VU` - Vanuatu
            * `WF` - Wallis and Futuna
            * `WS` - Samoa
            * `YE` - Yemen
            * `ZA` - South Africa
            * `ZM` - Zambia
            * `ZW` - Zimbabwe
        postal_code:
          type: string
          maxLength: 12
      required:
      - city
      - country
      - line1
      - postal_code
    Agreement:
      type: object
      description: |-
        Serializer to hold the recurring data information.
        This is required for being able to create recurring payments and the PGs
        require this information.
      properties:
        id:
          type: string
          description: "A unique identifier for the agreement established with the\
            \ payer. This ID links to the specific terms and conditions the payer\
            \ has authorized for processing their stored card details. Use cases include:\
            \ \n1. Recurring Payments: Periodic debits, e.g., gym memberships. \n\
            2. Installment Payments: Multiple charges for a single purchase over time.\
            \ \n3. Unscheduled: Future payments as required, e.g., account top-ups.\
            \ \n4. Industry Practice: Standard business practices related to an original\
            \ payment, e.g., hotel charges after checkout."
          maxLength: 128
        amount_variability:
          enum:
          - fixed
          - variable
          type: string
          description: |-
            Indicates if all payments within the agreement use the same amount or if the amount differs between the payments.

            * `fixed` - Fixed
            * `variable` - Variable
        start_date:
          type: string
          format: date
          description: Date on which the agreement with the payer to process payments
            starts.
        expiry_date:
          type: string
          format: date
          description: Date on which your agreement with the payer to process payments
            expires.
        max_amount_per_cycle:
          type: string
          format: decimal
          description: The maximum amount for a single payment in the series as agreed
            with the payer.
        cycle_interval_days:
          type: integer
          maximum: 366
          minimum: 1
          description: The minimum number of days between payments agreed with the
            payer.
        total_cycles:
          type: integer
          maximum: 999
          minimum: 1
          description: The number of merchant-initiated payments within the recurring
            payment agreement.
        frequency:
          enum:
          - irregular
          - daily
          - weekly
          - semi_monthly
          - monthly
          - quarterly
          - semi_annually
          - yearly
          - other
          type: string
          description: |-
            The frequency of the payments within the series as agreed with the payer.

            * `irregular` - Irregular
            * `daily` - Daily
            * `weekly` - Weekly
            * `semi_monthly` - Semi Monthly
            * `monthly` - Monthly
            * `quarterly` - Quarterly
            * `semi_annually` - Semi Annually
            * `yearly` - Yearly
            * `other` - Other
        type:
          enum:
          - event_based
          - installment
          - recurring
          - unscheduled
          - other
          type: string
          default: recurring
          description: |-
            The type of commercial agreement that the payer has with the merchant.

            * `event_based` - Event Based
            * `installment` - Installment
            * `recurring` - Recurring
            * `unscheduled` - Unscheduled
            * `other` - Other
        seller:
          allOf:
          - $ref: '#/components/schemas/AgreementSeller'
          description: Details about the retailer, if the agreement is for installment
            payments.
        extra_params:
          allOf:
          - $ref: '#/components/schemas/AgreementExtraParams'
          description: Additional parameters related to the agreement.
    AgreementExtraParams:
      type: object
      properties:
        payment_processing_day:
          type: integer
          maximum: 31
          minimum: 1
          description: Day of the month on which the payment must be processed. Not
            required for unscheduled payment agreements.
    AgreementSeller:
      type: object
      properties:
        name:
          type: string
          description: The retailer's trading name.
          maxLength: 128
        short_name:
          type: string
          description: Abbreviation of the retailer's trading name, suitable for payer's
            statement display.
          maxLength: 64
        category_code:
          type: string
          description: A 4-digit code classifying the retailer's business by the type
            of goods or services it offers.
          maxLength: 64
    AmountDetails:
      type: object
      properties:
        currency_code:
          type: string
          readOnly: true
          description: The specified currency represents the denomination of the transaction.Nevertheless,
            it doesn't necessarily mandate payment in this exact currency.Due to potential
            currency conversions or exchanges, the final charge may be in a different
            currency.
        amount:
          type: string
          description: Represents the total amount of the payment transaction, which
            includes the cost of the purchased items or services but excludes any
            additional fees or charges
          maxLength: 120
        total:
          type: string
          readOnly: true
          description: Denotes the comprehensive total of the payment transaction,
            incorporating both the principal amount and any associated fees.
        fee:
          type: string
          readOnly: true
          description: The `Fee` indicates the sum disbursed by the customer in their
            chosen currency for the payment. Note, this currency could vary from the
            currency used for the transaction.
      required:
      - currency_code
      - fee
      - total
    ApplePayConfigOutput:
      type: object
      description: Serializer for Apple Pay config, to be used in SDK clients like
        web and mobile.
      properties:
        domain:
          type: string
          description: The domain of the merchant accepting the payment.
          maxLength: 255
        merchant_id:
          type: string
          description: The ID of the merchant accepting the payment.
          maxLength: 100
        code:
          type: string
          description: The payment service code.
          maxLength: 100
          pattern: ^[-a-zA-Z0-9_]+$
        shop_name:
          type: string
          description: The name of the shop or store accepting the payment.
          maxLength: 255
        amount:
          type: string
          description: The total amount of the payment, including any fees.
          maxLength: 20
        fee:
          type: string
          description: The fee for the payment.
          maxLength: 20
        fee_description:
          type: string
          description: This field provides the label for any additional transaction
            fee. In the SDK, this label will be displayed prominently during the checkout
            process to inform the payer about the nature of the fee. Ensure to incorporate
            this field in a clear and visible manner within the checkout UI to maintain
            transparency with the end-users.
          maxLength: 128
        currency_code:
          type: string
          description: The ISO 4217 currency code for the payment.
          maxLength: 10
        country_code:
          type: string
          description: The ISO 3166-1 alpha-2 country code for the payment currency.
          maxLength: 2
        validation_url:
          type: string
          format: uri
          description: The URL to use for validating the payment session.
          maxLength: 2000
        payment_url:
          type: string
          format: uri
          description: The URL to use for submitting the payment.
          maxLength: 2000
        session_id:
          type: string
          description: The ID of the payment session, if included.
          maxLength: 100
      required:
      - amount
      - code
      - country_code
      - currency_code
      - domain
      - fee
      - fee_description
      - merchant_id
      - payment_url
      - shop_name
      - validation_url
    ApplePayPayRejectedResponse:
      oneOf:
      - $ref: '#/components/schemas/DevicePayViewCancelResponse'
      - $ref: '#/components/schemas/DevicePayViewErrorResponse'
    ApplePayPayload:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/ParentToken'
      required:
      - token
    ApplePayPaymentData:
      type: object
      properties:
        version:
          type: string
        data:
          type: string
        signature:
          type: string
        header:
          $ref: '#/components/schemas/Header'
      required:
      - data
      - header
      - signature
      - version
    ApplePaySessionValidationErrorResponse:
      type: object
      properties:
        message:
          type: string
          default: Permission error while connecting to Apple servers. Contact the
            website administrator.
        callback_payload:
          $ref: '#/components/schemas/SDKErrorCallback'
      required:
      - callback_payload
    ApplePaySuccessSessionValidationResponse:
      type: object
      properties:
        epochTimestamp:
          type: integer
          default: 1684246149600
          description: The current epoch timestamp in milliseconds.
        expiresAt:
          type: integer
          default: 1684246149600
          description: The epoch timestamp in milliseconds when the session expires.
        merchantSessionIdentifier:
          type: string
          default: SSHFE64C210A89B444EAC94C97DC8F491E9
          description: The merchant session identifier.
        nonce:
          type: string
          default: a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
          description: The nonce for the session.
        merchantIdentifier:
          type: string
          default: 1D2C836E771FA6598F2CB6A8A85A
          description: The merchant identifier.
        domainName:
          type: string
          default: example.com
          description: The domain name of the merchant.
        displayName:
          type: string
          default: Example Store
          description: The display name of the merchant.
        signature:
          type: string
          default: 308006092a864886f70d010702a0803080020101310d300b06092a864886f70d010
          description: The signature for the session.
        operationalAnalyticsIdentifier:
          type: string
          default: Apple Pay:1D2C836E771FA6598F2CB6A8A85A
          description: The operational analytics identifier.
        retries:
          type: integer
          default: 0
          description: The number of retries for the session.
        pspId:
          type: string
          default: 1D2C836E771FA6598F2CB6A8A85A
          description: The PSP identifier.
    Attempt:
      type: object
      description: This Attempt models its used solely for PaymentTransaction detail
        page
      properties:
        id:
          type: integer
          readOnly: true
        state:
          enum:
          - pending
          - success
          - failed
          - canceled
          - error
          - cod
          type: string
          description: |-
            Represents the current status of a payment attempt. This means that it shows whether a payment is pending, has been successfully processed, has failed, has been canceled, or has encountered an error. Additionally, it also supports the Cash on Delivery payment method.

            * `pending` - Pending
            * `success` - Success
            * `failed` - Failed
            * `canceled` - Canceled
            * `error` - Error
            * `cod` - Cash on Delivery
        message:
          type: string
          nullable: true
          description: Error message in case of failed payment
        reference_number:
          type: string
          nullable: true
          description: This is a unique value associated with each payment attempt
            made by a customer. It serves as the unique identifier for the payment
            when sent to the Payment Gateway (PG). It can be used to identify a specific
            payment attempt within one session, allowing for multiple reference numbers
            per session_id.
          maxLength: 64
        gateway_response:
          type: object
          additionalProperties: {}
        amount:
          type: string
          maxLength: 120
        fee:
          type: string
          maxLength: 120
        total:
          type: string
          maxLength: 120
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        state_changed_at:
          type: string
          format: date-time
        currency_code:
          enum: []
          type: boolean
          description: ''
        disclosed_to_merchant:
          type: boolean
          title: Disclosed to merchant?
        disclosed_data:
          type: object
          additionalProperties: {}
          description: Webhooked data to merchant webhook URL.
        disclosure_url_error:
          type: object
          additionalProperties: {}
          title: Webhook URL error
          description: Logs the error reason of merchant webhook url.
        request_data:
          type: object
          additionalProperties: {}
          description: Technical data of the request that user sent.
        data:
          type: object
          additionalProperties: {}
          description: Used to store useful information for internal purposes
      required:
      - created
      - currency_code
      - id
      - modified
    AutoDebit:
      type: object
      description: |-
        Auto debit serializer should take session_id and consumer payment token
        then validate if session id is valid
        if session id is valid then validate if payment gateway supports auto debit
        if payment gateway supports auto debit then validate if payment gateway has implemented auto debit
        if payment gateway has implemented auto debit then charge the token and return charge response from client
        auto_debit method which should be implemented in client
      properties:
        session_id:
          type: string
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
          maxLength: 128
        token:
          type: string
          description: Use this field to provide the unique identifier of a saved
            customer card for processing a payment in the API request.
      required:
      - session_id
      - token
    AutoDebitErrors:
      oneOf:
      - $ref: '#/components/schemas/FieldErrors'
      - $ref: '#/components/schemas/AutoDebitFailure'
    AutoDebitFailure:
      type: object
      properties:
        detail:
          type: string
          description: Provides a message associated with the operation, suitable
            for displaying to the end user.
        result:
          enum:
          - failed
          type: string
          description: '* `failed` - Failed'
      required:
      - detail
      - result
    Bulk:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 512
      required:
      - id
    Card:
      type: object
      description: Represents token details, only if the user pays with a tokenized
        card, Ottu will include the token details in the response.
      properties:
        brand:
          type: string
          nullable: true
          description: The card brand (e.g., Visa, Mastercard) associated with the
            card. Display this information for customer reference.
          maxLength: 32
        customer_id:
          type: string
          description: The unique identifier for the customer who owns the card
          maxLength: 36
        cvv_required:
          type: boolean
          description: Specifies if the card requires the submission of a CVV for
            transactions. A card without CVV requirement can be used for auto-debit
            or recurring payments.
        expiry_month:
          type: string
          description: The card's expiration month. Provide this information for transaction
            processing and validation.
          maxLength: 2
        expiry_year:
          type: string
          description: The card's expiration year. Provide this information for transaction
            processing and validation.
          maxLength: 2
        is_expired:
          type: boolean
          description: A boolean field indicating whether the card has expired. Use
            this information to determine if the card is valid for transactions and
            to notify the customer if necessary.
        is_preferred:
          type: boolean
          readOnly: true
          description: ' Indicates if the card is the customer''s preferred payment
            option. Order cards with this attribute set to true at the top of the
            list for easy access.'
        name_on_card:
          type: string
          nullable: true
          description: The cardholder's name as it appears on the card. Display this
            information for customer verification.
          maxLength: 64
        number:
          type: string
          nullable: true
          description: The masked card number to be displayed, ensuring customer privacy
            and security while providing essential information.
          maxLength: 19
        pg_code:
          type: string
          description: The `pg_code` associated with the card's creation.
        token:
          type: string
          description: The unique token associated with the card, required for tokenized
            card payments. Use this value to securely process transactions.
          maxLength: 50
        agreements:
          type: object
          additionalProperties: {}
          description: List of agreements associated with this card.
      required:
      - agreements
      - brand
      - customer_id
      - cvv_required
      - expiry_month
      - expiry_year
      - is_expired
      - is_preferred
      - name_on_card
      - number
      - pg_code
      - token
    CardAcceptanceCriteria:
      type: object
      properties:
        min_expiry_time:
          type: integer
          maximum: 365
          minimum: 1
          description: |-
            Specifies the minimum required validity period, in days, for a card to be eligible for payment. If set to 30 days, for example, cards set to expire within the next month would be declined. This ensures short-lived cards nearing their expiration date are filtered out, reducing chances of payment failures. When implementing, balance your operational needs with customer convenience. Setting it too stringent might increase payment declines, while a lenient approach could risk future payment failures.

            Additionally, it defaults to 30 days when the `payment_type` is `auto_debit`. If any other payment type is selected, no default value is set.
    CardErrors:
      oneOf:
      - $ref: '#/components/schemas/FieldErrors'
      - $ref: '#/components/schemas/GenericErrorMessage'
    CardSDK:
      type: object
      description: Serializer Card model for SDK
      properties:
        agreements:
          type: object
          additionalProperties: {}
          description: List of agreements associated with this card.
        customer_id:
          type: string
          description: The unique identifier for the customer who owns the card
          maxLength: 36
        brand:
          type: string
          nullable: true
          description: The card brand (e.g., Visa, Mastercard) associated with the
            card. Display this information for customer reference.
          maxLength: 32
        name_on_card:
          type: string
          nullable: true
          description: The cardholder's name as it appears on the card. Display this
            information for customer verification.
          maxLength: 64
        number:
          type: string
          nullable: true
          description: The masked card number to be displayed, ensuring customer privacy
            and security while providing essential information.
          maxLength: 19
        expiry_month:
          type: string
          description: The card's expiration month. Provide this information for transaction
            processing and validation.
          maxLength: 2
        expiry_year:
          type: string
          description: The card's expiration year. Provide this information for transaction
            processing and validation.
          maxLength: 2
        token:
          type: string
          description: The unique token associated with the card, required for tokenized
            card payments. Use this value to securely process transactions.
          maxLength: 50
        is_preferred:
          type: boolean
          readOnly: true
          description: ' Indicates if the card is the customer''s preferred payment
            option. Order cards with this attribute set to true at the top of the
            list for easy access.'
        is_expired:
          type: boolean
          description: A boolean field indicating whether the card has expired. Use
            this information to determine if the card is valid for transactions and
            to notify the customer if necessary.
        pg_code:
          type: string
          description: The `pg_code` associated with the card's creation.
        cvv_required:
          type: boolean
          description: Specifies if the card requires the submission of a CVV for
            transactions. A card without CVV requirement can be used for auto-debit
            or recurring payments.
        delete_url:
          type: string
          readOnly: true
          description: Delete URL for this card.
        submit_url:
          type: string
          readOnly: true
          description: Submit URL for this card.
      required:
      - agreements
      - brand
      - customer_id
      - cvv_required
      - delete_url
      - expiry_month
      - expiry_year
      - is_expired
      - is_preferred
      - name_on_card
      - number
      - pg_code
      - submit_url
      - token
    Cash acknowledgement Errors:
      oneOf:
      - $ref: '#/components/schemas/GenericErrorMessage'
      - $ref: '#/components/schemas/FieldErrors'
    CashPayment:
      type: object
      description: |-
        Serializer for acknowledging cash payments.

        Inherits from BaseTxnLookupSerializer, which provides the logic for retrieving
        a PaymentTransaction object based on the provided session ID.
      properties:
        session_id:
          type: string
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
          maxLength: 128
      required:
      - session_id
    CheckoutPOSTRequest:
      type: object
      description: |-
        Serializer to work with PaymentTransaction instances.

        Also uses request data from other serializers to save into PaymentTransaction db table:
      properties:
        amount:
          type: string
          format: decimal
          description: Represents the total amount of the payment transaction, which
            includes the cost of the purchased items or services but excludes any
            additional fees or charges
        currency_code:
          type: string
          description: The specified currency represents the denomination of the transaction.Nevertheless,
            it doesn't necessarily mandate payment in this exact currency.Due to potential
            currency conversions or exchanges, the final charge may be in a different
            currency.
        pg_codes:
          type: array
          items:
            type: string
          title: Gateway
          description: The list of payment gateway codes from which a customer can
            select to perform the payment or authorization.
        type:
          enum:
          - e_commerce
          - payment_request
          type: string
          description: |-
            The type of the payment transaction. This field represents the purpose of the payment and can be one of several pre-defined choices.

            * `e_commerce` - Ecommerce
            * `payment_request` - Payment Request
        billing_address:
          $ref: '#/components/schemas/Address'
        shipping_address:
          $ref: '#/components/schemas/ShippingAddress'
        agreement:
          allOf:
          - $ref: '#/components/schemas/Agreement'
          description: "An established contractual arrangement with the payer, which\
            \ authorizes you to securely store and subsequently utilize their payment\
            \ information for specific purposes. This could encompass arrangements\
            \ like recurring payments for services such as mobile subscriptions, installment-based\
            \ payments for purchases, arrangements for ad-hoc charges like account\
            \ top-ups, or for standard industry practices like penalty charges for\
            \ missed appointments. \n\nNote: If your intention is solely to store\
            \ payment details for transactions initiated by the payer in the future,\
            \ then this parameter group should not be used."
        attachment:
          type: string
          format: uri
          description: 'A writable field that accepts an attachment file to be included
            in email notifications sent to the customer regarding their payment, and
            also be available for download on the checkout page. This field may be
            used to provide the customer with additional information or documentation
            related to their purchase. The value of this field should be a file object.
            Upon successful submission, the API will return the URL for downloading
            the attached file. '
        attachment_short_url:
          type: string
          format: uri
          readOnly: true
          description: A short URL that links to the attachment associated with this
            payment. This URL may be included in email/sms notifications sent to the
            customer regarding their payment or displayed on the checkout page to
            allow the customer to easily access the attachment.
        attachment_upload_url:
          type: string
          description: A writable field that accepts an attachment that has already
            been uploaded to the server.
          pattern: (?:pdf|jpeg|png|doc|docx|jpg|xls|xlsx|txt)$
        card_acceptance_criteria:
          allOf:
          - $ref: '#/components/schemas/CardAcceptanceCriteria'
          description: |-
            This field allows you to define specific rules and conditions that a card must meet to be eligible for payment. These stipulations apply regardless of whether a customer chooses to pay using a saved card or opts to add a new card for the transaction. By leveraging the `card_acceptance_criteria`, you gain the power to fine-tune your payment processing strategy, tailoring acceptance rules to align with your business needs, security standards, and risk management policies.

            **Example**: If you run an exclusive service that caters predominantly to premium customers, you might set criteria that only allow transactions from high-tier credit cards like VISA Platinum. This ensures that payments align with the exclusivity and branding of your services. Remember to configure these criteria thoughtfully. Striking the right balance between security, risk mitigation, and user experience is paramount.

            **Note**: The `card_acceptance_criteria` field is applicable only for direct payments and not for hosted session payments.
        checkout_short_url:
          type: string
          format: uri
          readOnly: true
          description: A short URL link that, when opened, redirects to the checkout
            page for this payment. This URL may be shared with the customer to allow
            them to easily access and complete the payment. This field is only available
            if the `shortify_checkout_url` field is set to True.
        checkout_url:
          type: string
          format: uri
          readOnly: true
          description: URL that directs the customer to the Ottu Checkout Page where
            they can see the payment details and available payment methods for the
            transaction. If you need to share the payment link over SMS or WhatsApp,
            use `checkout_short_url` instead.
        customer_email:
          type: string
          format: email
          description: The email address of the customer that is used to send payment
            notifications and receipts, and can be used for fraud prevention. This
            field is mandatory and is always sent to the payment gateway. It may also
            be included in the invoice, receipt, email, and displayed on the payment
            page.
          maxLength: 128
        customer_first_name:
          type: string
          description: The first name of the recipient of the payment. This field
            is used for various communications such as the invoice, receipt, email,
            SMS, or displayed on the payment page. It may also be sent to the payment
            gateway if necessary.
          maxLength: 64
        customer_id:
          type: string
          description: The customer ID is a unique identifier for the customer within
            the merchant's system. It is also used as a merchant identifier for the
            customer and plays a critical role in tokenization. All the customer's
            cards will be associated with this ID.
          maxLength: 64
        customer_last_name:
          type: string
          description: The last name of the recipient of the payment. This field is
            used for various communications such as the invoice, receipt, email, SMS,
            or displayed on the payment page. It may also be sent to the payment gateway
            if necessary.
          maxLength: 64
        customer_phone:
          type: string
          description: Customer phone number associated with the payment. This might
            be sent to the payment gateway and depending on the gateway, it may trigger
            a click to pay process on the payment page. The phone number will also
            be included in the invoice, receipt, email, and displayed on the payment
            page.
          maxLength: 16
        due_datetime:
          type: string
          format: date-time
          title: Due date and time
          description: The date and time by which the payment is due. This field may
            be used to help remind the customer to complete the payment before the
            due date.
        email_recipients:
          type: array
          items:
            type: string
            format: email
          description: A comma-separated list of email addresses for internal recipients
            who will receive customer emails. These recipients will be included in
            email notifications sent to the customer regarding their payment.
        expiration_time:
          type: string
          description: If defined, any payment transactions created more than the
            specified period of time ago will be invalidated or expired if the customer
            attempts to complete them. By default, this expiration period is set to
            24 hours from the time of transaction creation. This feature helps ensure
            that payment transactions are processed promptly.
        extra:
          allOf:
          - $ref: '#/components/schemas/ExtraInner'
          description: The extra information for the payment details, which the merchant
            has sent it in key value form.
        generate_qr_code:
          type: boolean
          writeOnly: true
          default: false
          description: If set to true, the `qr_code_url` field will be present in
            the response. Upon scanning it, the customer will be redirected to the
            checkout_url, which is the Ottu Checkout page.
        include_sdk_setup_preload:
          type: boolean
          writeOnly: true
          default: false
          description: Set this to true to include the 'sdk_setup_preload_payload'
            payload in the API response. This payload is only generated and added
            when this parameter is explicitly set to true. By default, it is false
            and the 'sdk_setup_preload_payload' payload will not be included.
        initiator_id:
          type: integer
          readOnly: true
          title: initiator
          description: The user who initiated the creation of this payment transaction,
            if available. This field is optional and may be used to track who created
            the payment transaction. Note that if the payment transaction was created
            via the Checkout API using an API-Key, no initiator will be associated
            with the payment.
        language:
          enum:
          - en
          - ar
          type: string
          default: en
          description: |-
            This field specifies the language to be used for communication with the customer, including the payment page, receipt, invoice, email, SMS, and any other communications related to the payment transaction.

            * `en` - English
            * `ar` - Arabic
        notifications:
          allOf:
          - $ref: '#/components/schemas/Notifications'
          title: Notification settings
          description: A JSON field that contains the notification settings for this
            payment transaction, including SMS and email notifications, as well as
            the events for which they will be sent (e.g., 'created', 'paid', 'refund',
            'canceled', etc.). This field may be used to configure and customize the
            notifications sent to customers and internal recipients throughout the
            payment process.
        operation:
          type: string
          readOnly: true
          description: Specifies the type of operation to be performed by the payment
            gateway. If set to `purchase`, the payment source will be directly charged.
            If set to `authorize`, the payment source will only be authorized and
            the actual charge will be made at a later time.
        order_no:
          type: string
          description: The unique identifier assigned to this payment transaction.
            It is used for tracking purposes and is set by the merchant or the system.
          maxLength: 128
        payment_methods:
          allOf:
          - $ref: '#/components/schemas/PaymentMethodsForRedirect'
          readOnly: true
          description: An array containing all the payment methods derived from the
            `pg_codes` input. Each object in the array contains information about
            a single payment gateway, including its icon and the `redirect_url` that
            will redirect the customer to the payment gateway's payment page.
        payment_type:
          enum:
          - one_off
          - auto_debit
          type: string
          default: one_off
          description: "Type of payment. Choose `one_off` for payments that occur\
            \ only once without future commitments. Choose `auto_debit` for payments\
            \ that are automatically deducted, such as recurring subscriptions, installments,\
            \ or unscheduled auto-debits. \n\nNOTE: If `auto_debit` is selected: \n\
            1. `agreement` and `customer_id` parameters will also be mandatory. \n\
            2. Only PG codes supporting tokenization can be selected. \nAs a side\
            \ effect, the card used for the payment will be associated with the supplied\
            \ `agreement.id`. This card will be locked, preventing the customer from\
            \ deleting it from the system until an alternate card is chosen for auto-debit\
            \ payments.\n\n* `one_off` - One Off\n* `auto_debit` - Auto Debit"
        product_type:
          type: string
          description: The type of product or service being purchased. This field
            may be used for tracking and reporting purposes.
          maxLength: 128
        qr_code_url:
          type: string
          format: uri
          readOnly: true
          description: A QR code that, when scanned, redirects to the checkout page
            for this payment. This QR code may be displayed on invoices, receipts,
            or other documents to allow customers to easily access the checkout page
            and make a payment. This parameter is only present when `generate_qr_code`
            is set to true.
        redirect_url:
          type: string
          format: uri
          description: The URL where the customer will be redirected after the payment
            stage only if the webhook URL returns a success status. `order_no`, `reference_number`
            and `session_id` will be appended to the redirect URL as query parameters.
          maxLength: 200
        sdk_setup_preload_payload:
          allOf:
          - $ref: '#/components/schemas/CheckoutSDK'
          readOnly: true
          default: false
          description: A JSON object containing preloaded data required to initialize
            the checkout interface.This includes essential details such as customer
            information, available payment methods.and specific transaction details,
            all formatted according to the Checkout SDK's initialization specifications.This
            field streamlines the checkout process by providing necessary information
            upfront.enhancing user experience and efficiency.
        session_id:
          type: string
          readOnly: true
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
        shortify_attachment_url:
          type: boolean
          writeOnly: true
          default: false
          description: If set to True, the URL of the uploaded attachment will be
            shortened using a URL shortener service. This should be used when sharing
            the attachment URL via SMS or WhatsApp.
        shortify_checkout_url:
          type: boolean
          writeOnly: true
          default: false
          description: If set to True, the checkout URL will be shortened using a
            URL shortener service. This should be used when sharing the payment URL
            via SMS or WhatsApp.
        state:
          enum:
          - created
          - pending
          - attempted
          - authorized
          - paid
          - failed
          - canceled
          - expired
          - invalided
          - refunded
          - cod
          type: string
          readOnly: true
          description: |-
            The current state of the payment transaction, it helps to understand the progress of the payment.

            * `created` - Created
            * `pending` - Pending
            * `attempted` - Attempted
            * `authorized` - Authorized
            * `paid` - Paid
            * `failed` - Failed
            * `canceled` - Canceled
            * `expired` - Expired
            * `invalided` - Invalided
            * `refunded` - Refunded
            * `cod` - Cash on Delivery
        unit_code:
          type: string
          writeOnly: true
          title: Unit
          description: The slug of the unit to be used for the transaction.
        vendor_name:
          type: string
          description: The name of the vendor or merchant associated with this payment.
            This field may be used for accounting and reporting purposes.
          maxLength: 64
        webhook_url:
          type: string
          format: uri
          description: 'URL where the payment result will be sent via a POST request
            after the customer has completed the payment session. The payment result
            will be included in the request body. '
      required:
      - amount
      - attachment_short_url
      - checkout_short_url
      - checkout_url
      - currency_code
      - initiator_id
      - operation
      - payment_methods
      - pg_codes
      - qr_code_url
      - sdk_setup_preload_payload
      - session_id
      - state
      - type
    CheckoutPOSTResponse:
      type: object
      description: |-
        Serializer to work with PaymentTransaction instances.

        Also uses request data from other serializers to save into PaymentTransaction db table:
      properties:
        amount:
          type: string
          format: decimal
          description: Represents the total amount of the payment transaction, which
            includes the cost of the purchased items or services but excludes any
            additional fees or charges
        currency_code:
          type: string
          description: The specified currency represents the denomination of the transaction.Nevertheless,
            it doesn't necessarily mandate payment in this exact currency.Due to potential
            currency conversions or exchanges, the final charge may be in a different
            currency.
        pg_codes:
          type: array
          items:
            type: string
          title: Gateway
          description: The list of payment gateway codes from which a customer can
            select to perform the payment or authorization.
        type:
          enum:
          - e_commerce
          - payment_request
          type: string
          description: |-
            The type of the payment transaction. This field represents the purpose of the payment and can be one of several pre-defined choices.

            * `e_commerce` - Ecommerce
            * `payment_request` - Payment Request
        billing_address:
          $ref: '#/components/schemas/Address'
        shipping_address:
          $ref: '#/components/schemas/ShippingAddress'
        agreement:
          allOf:
          - $ref: '#/components/schemas/Agreement'
          description: "An established contractual arrangement with the payer, which\
            \ authorizes you to securely store and subsequently utilize their payment\
            \ information for specific purposes. This could encompass arrangements\
            \ like recurring payments for services such as mobile subscriptions, installment-based\
            \ payments for purchases, arrangements for ad-hoc charges like account\
            \ top-ups, or for standard industry practices like penalty charges for\
            \ missed appointments. \n\nNote: If your intention is solely to store\
            \ payment details for transactions initiated by the payer in the future,\
            \ then this parameter group should not be used."
        attachment:
          type: string
          format: uri
          description: 'A writable field that accepts an attachment file to be included
            in email notifications sent to the customer regarding their payment, and
            also be available for download on the checkout page. This field may be
            used to provide the customer with additional information or documentation
            related to their purchase. The value of this field should be a file object.
            Upon successful submission, the API will return the URL for downloading
            the attached file. '
        attachment_short_url:
          type: string
          format: uri
          readOnly: true
          description: A short URL that links to the attachment associated with this
            payment. This URL may be included in email/sms notifications sent to the
            customer regarding their payment or displayed on the checkout page to
            allow the customer to easily access the attachment.
        attachment_upload_url:
          type: string
          description: A writable field that accepts an attachment that has already
            been uploaded to the server.
          pattern: (?:pdf|jpeg|png|doc|docx|jpg|xls|xlsx|txt)$
        card_acceptance_criteria:
          allOf:
          - $ref: '#/components/schemas/CardAcceptanceCriteria'
          description: |-
            This field allows you to define specific rules and conditions that a card must meet to be eligible for payment. These stipulations apply regardless of whether a customer chooses to pay using a saved card or opts to add a new card for the transaction. By leveraging the `card_acceptance_criteria`, you gain the power to fine-tune your payment processing strategy, tailoring acceptance rules to align with your business needs, security standards, and risk management policies.

            **Example**: If you run an exclusive service that caters predominantly to premium customers, you might set criteria that only allow transactions from high-tier credit cards like VISA Platinum. This ensures that payments align with the exclusivity and branding of your services. Remember to configure these criteria thoughtfully. Striking the right balance between security, risk mitigation, and user experience is paramount.

            **Note**: The `card_acceptance_criteria` field is applicable only for direct payments and not for hosted session payments.
        checkout_short_url:
          type: string
          format: uri
          readOnly: true
          description: A short URL link that, when opened, redirects to the checkout
            page for this payment. This URL may be shared with the customer to allow
            them to easily access and complete the payment. This field is only available
            if the `shortify_checkout_url` field is set to True.
        checkout_url:
          type: string
          format: uri
          readOnly: true
          description: URL that directs the customer to the Ottu Checkout Page where
            they can see the payment details and available payment methods for the
            transaction. If you need to share the payment link over SMS or WhatsApp,
            use `checkout_short_url` instead.
        customer_email:
          type: string
          format: email
          description: The email address of the customer that is used to send payment
            notifications and receipts, and can be used for fraud prevention. This
            field is mandatory and is always sent to the payment gateway. It may also
            be included in the invoice, receipt, email, and displayed on the payment
            page.
          maxLength: 128
        customer_first_name:
          type: string
          description: The first name of the recipient of the payment. This field
            is used for various communications such as the invoice, receipt, email,
            SMS, or displayed on the payment page. It may also be sent to the payment
            gateway if necessary.
          maxLength: 64
        customer_id:
          type: string
          description: The customer ID is a unique identifier for the customer within
            the merchant's system. It is also used as a merchant identifier for the
            customer and plays a critical role in tokenization. All the customer's
            cards will be associated with this ID.
          maxLength: 64
        customer_last_name:
          type: string
          description: The last name of the recipient of the payment. This field is
            used for various communications such as the invoice, receipt, email, SMS,
            or displayed on the payment page. It may also be sent to the payment gateway
            if necessary.
          maxLength: 64
        customer_phone:
          type: string
          description: Customer phone number associated with the payment. This might
            be sent to the payment gateway and depending on the gateway, it may trigger
            a click to pay process on the payment page. The phone number will also
            be included in the invoice, receipt, email, and displayed on the payment
            page.
          maxLength: 16
        due_datetime:
          type: string
          format: date-time
          title: Due date and time
          description: The date and time by which the payment is due. This field may
            be used to help remind the customer to complete the payment before the
            due date.
        email_recipients:
          type: array
          items:
            type: string
            format: email
          description: A comma-separated list of email addresses for internal recipients
            who will receive customer emails. These recipients will be included in
            email notifications sent to the customer regarding their payment.
        expiration_time:
          type: string
          description: If defined, any payment transactions created more than the
            specified period of time ago will be invalidated or expired if the customer
            attempts to complete them. By default, this expiration period is set to
            24 hours from the time of transaction creation. This feature helps ensure
            that payment transactions are processed promptly.
        extra:
          allOf:
          - $ref: '#/components/schemas/ExtraInner'
          description: The extra information for the payment details, which the merchant
            has sent it in key value form.
        generate_qr_code:
          type: boolean
          writeOnly: true
          default: false
          description: If set to true, the `qr_code_url` field will be present in
            the response. Upon scanning it, the customer will be redirected to the
            checkout_url, which is the Ottu Checkout page.
        include_sdk_setup_preload:
          type: boolean
          writeOnly: true
          default: false
          description: Set this to true to include the 'sdk_setup_preload_payload'
            payload in the API response. This payload is only generated and added
            when this parameter is explicitly set to true. By default, it is false
            and the 'sdk_setup_preload_payload' payload will not be included.
        initiator_id:
          type: integer
          readOnly: true
          title: initiator
          description: The user who initiated the creation of this payment transaction,
            if available. This field is optional and may be used to track who created
            the payment transaction. Note that if the payment transaction was created
            via the Checkout API using an API-Key, no initiator will be associated
            with the payment.
        language:
          enum:
          - en
          - ar
          type: string
          default: en
          description: |-
            This field specifies the language to be used for communication with the customer, including the payment page, receipt, invoice, email, SMS, and any other communications related to the payment transaction.

            * `en` - English
            * `ar` - Arabic
        notifications:
          allOf:
          - $ref: '#/components/schemas/Notifications'
          title: Notification settings
          description: A JSON field that contains the notification settings for this
            payment transaction, including SMS and email notifications, as well as
            the events for which they will be sent (e.g., 'created', 'paid', 'refund',
            'canceled', etc.). This field may be used to configure and customize the
            notifications sent to customers and internal recipients throughout the
            payment process.
        operation:
          type: string
          readOnly: true
          description: Specifies the type of operation to be performed by the payment
            gateway. If set to `purchase`, the payment source will be directly charged.
            If set to `authorize`, the payment source will only be authorized and
            the actual charge will be made at a later time.
        order_no:
          type: string
          description: The unique identifier assigned to this payment transaction.
            It is used for tracking purposes and is set by the merchant or the system.
          maxLength: 128
        payment_methods:
          allOf:
          - $ref: '#/components/schemas/PaymentMethodsForRedirect'
          readOnly: true
          description: An array containing all the payment methods derived from the
            `pg_codes` input. Each object in the array contains information about
            a single payment gateway, including its icon and the `redirect_url` that
            will redirect the customer to the payment gateway's payment page.
        payment_type:
          enum:
          - one_off
          - auto_debit
          type: string
          default: one_off
          description: "Type of payment. Choose `one_off` for payments that occur\
            \ only once without future commitments. Choose `auto_debit` for payments\
            \ that are automatically deducted, such as recurring subscriptions, installments,\
            \ or unscheduled auto-debits. \n\nNOTE: If `auto_debit` is selected: \n\
            1. `agreement` and `customer_id` parameters will also be mandatory. \n\
            2. Only PG codes supporting tokenization can be selected. \nAs a side\
            \ effect, the card used for the payment will be associated with the supplied\
            \ `agreement.id`. This card will be locked, preventing the customer from\
            \ deleting it from the system until an alternate card is chosen for auto-debit\
            \ payments.\n\n* `one_off` - One Off\n* `auto_debit` - Auto Debit"
        product_type:
          type: string
          description: The type of product or service being purchased. This field
            may be used for tracking and reporting purposes.
          maxLength: 128
        qr_code_url:
          type: string
          format: uri
          readOnly: true
          description: A QR code that, when scanned, redirects to the checkout page
            for this payment. This QR code may be displayed on invoices, receipts,
            or other documents to allow customers to easily access the checkout page
            and make a payment. This parameter is only present when `generate_qr_code`
            is set to true.
        redirect_url:
          type: string
          format: uri
          description: The URL where the customer will be redirected after the payment
            stage only if the webhook URL returns a success status. `order_no`, `reference_number`
            and `session_id` will be appended to the redirect URL as query parameters.
          maxLength: 200
        sdk_setup_preload_payload:
          allOf:
          - $ref: '#/components/schemas/CheckoutSDK'
          readOnly: true
          default: false
          description: A JSON object containing preloaded data required to initialize
            the checkout interface.This includes essential details such as customer
            information, available payment methods.and specific transaction details,
            all formatted according to the Checkout SDK's initialization specifications.This
            field streamlines the checkout process by providing necessary information
            upfront.enhancing user experience and efficiency.
        session_id:
          type: string
          readOnly: true
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
        shortify_attachment_url:
          type: boolean
          writeOnly: true
          default: false
          description: If set to True, the URL of the uploaded attachment will be
            shortened using a URL shortener service. This should be used when sharing
            the attachment URL via SMS or WhatsApp.
        shortify_checkout_url:
          type: boolean
          writeOnly: true
          default: false
          description: If set to True, the checkout URL will be shortened using a
            URL shortener service. This should be used when sharing the payment URL
            via SMS or WhatsApp.
        state:
          enum:
          - created
          - pending
          - attempted
          - authorized
          - paid
          - failed
          - canceled
          - expired
          - invalided
          - refunded
          - cod
          type: string
          readOnly: true
          description: |-
            The current state of the payment transaction, it helps to understand the progress of the payment.

            * `created` - Created
            * `pending` - Pending
            * `attempted` - Attempted
            * `authorized` - Authorized
            * `paid` - Paid
            * `failed` - Failed
            * `canceled` - Canceled
            * `expired` - Expired
            * `invalided` - Invalided
            * `refunded` - Refunded
            * `cod` - Cash on Delivery
        unit_code:
          type: string
          writeOnly: true
          title: Unit
          description: The slug of the unit to be used for the transaction.
        vendor_name:
          type: string
          description: The name of the vendor or merchant associated with this payment.
            This field may be used for accounting and reporting purposes.
          maxLength: 64
        webhook_url:
          type: string
          format: uri
          description: 'URL where the payment result will be sent via a POST request
            after the customer has completed the payment session. The payment result
            will be included in the request body. '
      required:
      - amount
      - attachment_short_url
      - checkout_short_url
      - checkout_url
      - currency_code
      - initiator_id
      - operation
      - payment_methods
      - pg_codes
      - qr_code_url
      - sdk_setup_preload_payload
      - session_id
      - state
      - type
    CheckoutSDK:
      type: object
      description: |-
        Serialize data for SDK init.
        The SDK will use this data to initialize the payment process and
        to display the payment methods.
      properties:
        amount:
          type: string
          format: decimal
          description: Represents the total amount of the payment transaction, which
            includes the cost of the purchased items or services but excludes any
            additional fees or charges
        apple_pay_available:
          type: boolean
          readOnly: true
          description: Indicates Apple Pay availability. If true, `apple_pay_config`
            is populated with the necessary configuration.
        apple_pay_config:
          allOf:
          - $ref: '#/components/schemas/ApplePayConfigOutput'
          readOnly: true
          description: Configuration for displaying the Apple Pay button.
        google_pay_available:
          type: boolean
          readOnly: true
          description: Indicates Google Pay availability. If true, `google_pay_config`
            is populated with the necessary configuration.
        google_pay_config:
          allOf:
          - $ref: '#/components/schemas/GooglePayConfigOutput'
          readOnly: true
          description: Configuration for displaying the Google Pay button.
        cards:
          type: array
          items:
            type: object
            additionalProperties: {}
          description: List of saved tokenized cards for customer payments, which
            can be used for transactions. Render alongside `payment_methods` for customers
            to choose from.
          readOnly: true
        customer_id:
          type: string
          description: The customer ID is a unique identifier for the customer within
            the merchant's system. It is also used as a merchant identifier for the
            customer and plays a critical role in tokenization. All the customer's
            cards will be associated with this ID.
          maxLength: 64
        customer_phone:
          type: string
          description: Customer phone number associated with the payment. This might
            be sent to the payment gateway and depending on the gateway, it may trigger
            a click to pay process on the payment page. The phone number will also
            be included in the invoice, receipt, email, and displayed on the payment
            page.
          maxLength: 16
        currency_code:
          type: string
          description: The specified currency represents the denomination of the transaction.Nevertheless,
            it doesn't necessarily mandate payment in this exact currency.Due to potential
            currency conversions or exchanges, the final charge may be in a different
            currency.
        language:
          enum:
          - en
          - ar
          type: string
          default: en
          description: |-
            This field specifies the language to be used for communication with the customer, including the payment page, receipt, invoice, email, SMS, and any other communications related to the payment transaction.

            * `en` - English
            * `ar` - Arabic
        operation:
          type: string
          readOnly: true
          description: Specifies the type of operation to be performed by the payment
            gateway. If set to `purchase`, the payment source will be directly charged.
            If set to `authorize`, the payment source will only be authorized and
            the actual charge will be made at a later time.
        payment_methods:
          type: string
          readOnly: true
          description: List of available payment methods, excluding device-based options
            like Apple Pay, Google Pay, and tokenized cards, that the SDK should render
            for customers to choose from.
        response:
          type: object
          additionalProperties: {}
          description: Payment Gateway Response, present post-payment. SDK refreshes
            payment details and triggers `successCallback` or `cancelCallback` based
            on `response.status`.
          readOnly: true
        state:
          enum:
          - created
          - pending
          - attempted
          - authorized
          - paid
          - failed
          - canceled
          - expired
          - invalided
          - refunded
          - cod
          type: string
          readOnly: true
          description: |-
            The current state of the payment transaction, it helps to understand the progress of the payment.

            * `created` - Created
            * `pending` - Pending
            * `attempted` - Attempted
            * `authorized` - Authorized
            * `paid` - Paid
            * `failed` - Failed
            * `canceled` - Canceled
            * `expired` - Expired
            * `invalided` - Invalided
            * `refunded` - Refunded
            * `cod` - Cash on Delivery
        type:
          enum:
          - e_commerce
          - payment_request
          type: string
          description: |-
            The type of the payment transaction. This field represents the purpose of the payment and can be one of several pre-defined choices.

            * `e_commerce` - Ecommerce
            * `payment_request` - Payment Request
        is_amount_editable:
          type: boolean
          readOnly: true
          title: Editable amount
          description: This field specifies whether the customer can modify the payment
            amount and choose the amount he wishes to pay.
        session_id:
          type: string
          readOnly: true
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
      required:
      - amount
      - apple_pay_available
      - apple_pay_config
      - cards
      - currency_code
      - customer_phone
      - google_pay_available
      - google_pay_config
      - is_amount_editable
      - operation
      - payment_methods
      - response
      - session_id
      - state
      - type
    CheckoutSDKResponse:
      type: object
      description: |-
        Serialize data for SDK init.
        The SDK will use this data to initialize the payment process and
        to display the payment methods.
      properties:
        amount:
          type: string
          format: decimal
          description: Represents the total amount of the payment transaction, which
            includes the cost of the purchased items or services but excludes any
            additional fees or charges
        apple_pay_available:
          type: boolean
          readOnly: true
          description: Indicates Apple Pay availability. If true, `apple_pay_config`
            is populated with the necessary configuration.
        apple_pay_config:
          allOf:
          - $ref: '#/components/schemas/ApplePayConfigOutput'
          readOnly: true
          description: Configuration for displaying the Apple Pay button.
        google_pay_available:
          type: boolean
          readOnly: true
          description: Indicates Google Pay availability. If true, `google_pay_config`
            is populated with the necessary configuration.
        google_pay_config:
          allOf:
          - $ref: '#/components/schemas/GooglePayConfigOutput'
          readOnly: true
          description: Configuration for displaying the Google Pay button.
        cards:
          type: array
          items:
            $ref: '#/components/schemas/CardSDK'
          description: List of saved tokenized cards for customer payments, which
            can be used for transactions. Render alongside `payment_methods` for customers
            to choose from.
        customer_id:
          type: string
          description: The customer ID is a unique identifier for the customer within
            the merchant's system. It is also used as a merchant identifier for the
            customer and plays a critical role in tokenization. All the customer's
            cards will be associated with this ID.
          maxLength: 64
        customer_phone:
          type: string
          description: Customer phone number associated with the payment. This might
            be sent to the payment gateway and depending on the gateway, it may trigger
            a click to pay process on the payment page. The phone number will also
            be included in the invoice, receipt, email, and displayed on the payment
            page.
          maxLength: 16
        currency_code:
          type: string
          description: The specified currency represents the denomination of the transaction.Nevertheless,
            it doesn't necessarily mandate payment in this exact currency.Due to potential
            currency conversions or exchanges, the final charge may be in a different
            currency.
        language:
          enum:
          - en
          - ar
          type: string
          default: en
          description: |-
            This field specifies the language to be used for communication with the customer, including the payment page, receipt, invoice, email, SMS, and any other communications related to the payment transaction.

            * `en` - English
            * `ar` - Arabic
        operation:
          type: string
          readOnly: true
          description: Specifies the type of operation to be performed by the payment
            gateway. If set to `purchase`, the payment source will be directly charged.
            If set to `authorize`, the payment source will only be authorized and
            the actual charge will be made at a later time.
        payment_methods:
          type: array
          items:
            $ref: '#/components/schemas/SDKPaymentMethods'
          description: List of available payment methods, excluding device-based options
            like Apple Pay, Google Pay, and tokenized cards, that the SDK should render
            for customers to choose from.
        response:
          allOf:
          - $ref: '#/components/schemas/PaymentResponse'
          description: Payment Gateway Response, present post-payment. SDK refreshes
            payment details and triggers `successCallback` or `cancelCallback` based
            on `response.status`.
        state:
          enum:
          - created
          - pending
          - attempted
          - authorized
          - paid
          - failed
          - canceled
          - expired
          - invalided
          - refunded
          - cod
          type: string
          readOnly: true
          description: |-
            The current state of the payment transaction, it helps to understand the progress of the payment.

            * `created` - Created
            * `pending` - Pending
            * `attempted` - Attempted
            * `authorized` - Authorized
            * `paid` - Paid
            * `failed` - Failed
            * `canceled` - Canceled
            * `expired` - Expired
            * `invalided` - Invalided
            * `refunded` - Refunded
            * `cod` - Cash on Delivery
        type:
          enum:
          - e_commerce
          - payment_request
          type: string
          description: |-
            The type of the payment transaction. This field represents the purpose of the payment and can be one of several pre-defined choices.

            * `e_commerce` - Ecommerce
            * `payment_request` - Payment Request
        is_amount_editable:
          type: boolean
          readOnly: true
          title: Editable amount
          description: This field specifies whether the customer can modify the payment
            amount and choose the amount he wishes to pay.
        session_id:
          type: string
          readOnly: true
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
      required:
      - amount
      - apple_pay_available
      - apple_pay_config
      - cards
      - currency_code
      - customer_phone
      - google_pay_available
      - google_pay_config
      - is_amount_editable
      - language
      - operation
      - payment_methods
      - response
      - session_id
      - state
      - type
    CheckoutSubmit:
      type: object
      description: |-
        This serializer is responsible for validating the data sent by the SDK
        when the user submits the payment form and for creating the url.
      properties:
        amount:
          type: string
          format: decimal
        customer_additional_phone:
          type: string
          description: The customer's additional phone number, if any. This field
            can be updated by the customer on the payment page or in the Checkout
            SDK.
          maxLength: 32
        pg_code:
          enum: []
          type: boolean
          description: |+
            the unique identifier code (`payment_methods[index].code`) for the payment method that the customer has selected to proceed with the transaction.

        save_card:
          type: boolean
          default: false
          description: If true, the card will be saved for future payments. This option
            is only available if the payment gateway supports it.
        status:
          enum:
          - success
          - error
          - failed
          type: string
          readOnly: true
          description: |-
            The status of the payment operation.It can be one of the following values: `success`, `canceled`, `error`

            * `success` - Success
            * `error` - Error
            * `failed` - Failed
        message:
          type: string
          readOnly: true
          description: The message to be displayed to the user.
        redirect_url:
          type: string
          format: uri
          readOnly: true
          description: This field provides the URL to which the customer should be
            redirected in order to complete the payment process when they have selected
            this specific payment method. The developer implementing the SDK must
            ensure that the redirection process is smooth and secure, providing a
            seamless experience for the customer while maintaining the integrity of
            the payment process.
        channel:
          enum:
          - web_sdk
          - mobile_sdk
          - hosted
          type: string
          default: web_sdk
          description: |-
            IMPORTANT: This field determines the channel through which the payment is being made and has a direct impact on the redirection behavior post-payment.

            For Web (`web_sdk`):
            - The payer will be redirected to the payment details page where they can complete the payment process. Use the code: `window.location.href = redirect_url` and the browser will handle any further redirects.

            For Mobile SDK (`mobile_sdk`):
            - The `redirect_url` should be opened in a webview. This is the page where the payer will enter their card details.
            - After entering the card details, the payer will be redirected to the final payment details page within the webview.
            - Detect the URL redirection by listening to redirects within the webview. When a redirect occurs to the URL `{merchant_id}/b/gw/mobile-sdk-redirect`, close the webview. This indicates that the payment process has completed.
            - After closing the webview, reload the SDK and call the `Retrieve init data API` to display the payment result to the payer.

            Note:  `merchant_id` is the same ID used to build the `Fetch retrieve data API` and is the parameter added in the CheckoutSDK.init method.

            * `web_sdk` - Web Sdk
            * `mobile_sdk` - Mobile Sdk
            * `hosted` - Hosted
      required:
      - message
      - pg_code
      - redirect_url
      - status
    CheckoutSubmitSuccessResponse:
      type: object
      properties:
        status:
          type: string
          readOnly: true
          default: success
          description: 'The status of the payment operation.It can be one of the following
            values: `success`, `canceled`, `error`'
        message:
          type: string
          readOnly: true
          description: The message to be displayed to the user.
        redirect_url:
          type: string
          format: uri
          description: This field provides the URL to which the customer should be
            redirected in order to complete the payment process when they have selected
            this specific payment method. The developer implementing the SDK must
            ensure that the redirection process is smooth and secure, providing a
            seamless experience for the customer while maintaining the integrity of
            the payment process.
      required:
      - message
      - redirect_url
      - status
    ChildPayment:
      type: object
      properties:
        amount:
          type: string
          readOnly: true
          description: Represents the total amount of the payment transaction, which
            includes the cost of the purchased items or services but excludes any
            additional fees or charges
        currency_code:
          type: string
          description: The specified currency represents the denomination of the transaction.Nevertheless,
            it doesn't necessarily mandate payment in this exact currency.Due to potential
            currency conversions or exchanges, the final charge may be in a different
            currency.
          maxLength: 3
          minLength: 3
        order_no:
          type: string
          nullable: true
          description: The unique identifier assigned to this payment transaction.
            It is used for tracking purposes and is set by the merchant or the system.
          maxLength: 128
        session_id:
          type: string
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
          maxLength: 128
        state:
          enum:
          - paid
          - refunded
          - refund_queued
          - refund_rejected
          - voided
          type: string
          description: |-
            The current state of the payment transaction, it helps to understand the progress of the payment.

            * `paid` - paid
            * `refunded` - refunded
            * `refund_queued` - refund_queued
            * `refund_rejected` - refund_rejected
            * `voided` - voided
      required:
      - amount
      - currency_code
    ChildrenPayment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          title: Internal ID
          description: This field is an automatically generated internal identifier
            for each payment transaction. This unique and sequential ID makes it easy
            to reference and manage individual transactions within the system.
        state:
          enum:
          - created
          - pending
          - attempted
          - authorized
          - paid
          - failed
          - canceled
          - expired
          - invalided
          - refunded
          - cod
          - refund_queued
          - refund_rejected
          - voided
          type: string
          description: |-
            The current state of the payment transaction, it helps to understand the progress of the payment.

            * `created` - Created
            * `pending` - Pending
            * `attempted` - Attempted
            * `authorized` - Authorized
            * `paid` - Paid
            * `failed` - Failed
            * `canceled` - Canceled
            * `expired` - Expired
            * `invalided` - Invalided
            * `refunded` - Refunded
            * `cod` - Cash on Delivery
            * `refund_queued` - Refund Queued
            * `refund_rejected` - Refund Rejected
            * `voided` - Voided
        created:
          type: string
          format: date-time
          readOnly: true
        amount:
          type: string
          description: Represents the total amount of the payment transaction, which
            includes the cost of the purchased items or services but excludes any
            additional fees or charges
          maxLength: 24
        currency_code:
          enum: []
          type: boolean
          description: |+
            The specified currency represents the denomination of the transaction.Nevertheless, it doesn't necessarily mandate payment in this exact currency.Due to potential currency conversions or exchanges, the final charge may be in a different currency.

        reference_number:
          type: string
          readOnly: true
          description: An auto-generated internal identifier for this payment transaction.
            While this field may be used for tracking and reporting purposes, it is
            recommended to use the session_id field instead, as it provides the same
            functionality and more.
        session_id:
          type: string
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
          maxLength: 128
        pg_response:
          type: object
          additionalProperties: {}
          readOnly: true
        disclosed_to_merchant:
          type: boolean
          readOnly: true
          title: Disclosed to Merchant?
        disclosed_data:
          type: object
          additionalProperties: {}
          readOnly: true
        webhook_url_error:
          type: object
          additionalProperties: {}
          readOnly: true
      required:
      - amount
      - created
      - currency_code
      - disclosed_data
      - disclosed_to_merchant
      - id
      - pg_response
      - reference_number
      - webhook_url_error
    ClientErrors:
      oneOf:
      - $ref: '#/components/schemas/FieldErrors'
      - $ref: '#/components/schemas/NestedFieldErrors'
      - $ref: '#/components/schemas/GenericErrorMessage'
    Customer:
      type: object
      description: Customer serializer for Ottu PG
      properties:
        id:
          type: string
          maxLength: 50
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        email:
          type: string
          format: email
        phone:
          type: string
          maxLength: 50
      required:
      - email
      - first_name
      - id
      - last_name
      - phone
    CustomerBillingAddress:
      type: object
      properties:
        line1:
          type: string
          title: Address Line 1
        line2:
          type: string
          title: Address Line 2
        city:
          type: string
        state:
          type: string
        country:
          type: string
        postal_code:
          type: string
      required:
      - city
      - country
      - line1
      - line2
      - postal_code
      - state
    DevicePayView:
      oneOf:
      - $ref: '#/components/schemas/DevicePayViewSuccessResponse'
      - $ref: '#/components/schemas/ThreeDSResponse'
    DevicePayViewCancelResponse:
      type: object
      description: |-
        Serializer for the response of the PayView of the payment services like
        Apple Pay, Google Pay, etc.
      properties:
        approved:
          type: boolean
          default: false
          description: Whether the payment was approved or not. For legacy purposes
            only, use `callback_payload` instead.
        message:
          type: string
          description: Informative message. For legacy purposes only, use `callback_payload`
            instead.
        callback_payload:
          allOf:
          - $ref: '#/components/schemas/SDKCancelCallback'
          description: This payload must be forwarded as is to `cancelCallback` method.
      required:
      - callback_payload
      - message
    DevicePayViewErrorResponse:
      type: object
      description: |-
        Serializer for the response of the PayView of the payment services like
        Apple Pay, Google Pay, etc.
      properties:
        approved:
          type: boolean
          default: false
          description: Whether the payment was approved or not. For legacy purposes
            only, use `callback_payload` instead.
        message:
          type: string
          description: Informative message. For legacy purposes only, use `callback_payload`
            instead.
        callback_payload:
          allOf:
          - $ref: '#/components/schemas/SDKErrorCallback'
          description: This payload must be forwarded as is to `errorCallback` method.
      required:
      - callback_payload
      - message
    DevicePayViewSuccessResponse:
      type: object
      description: |-
        Serializer for the response of the PayView of the payment services like
        Apple Pay, Google Pay, etc.

        The responses are aligned for all payment services.
      properties:
        approved:
          type: boolean
          default: true
          description: Whether the payment was approved or not. For legacy purposes
            only, use `callback_payload` instead.
        message:
          type: string
          description: Informative message. For legacy purposes only, use `callback_payload`
            instead.
        redirect_url:
          type: string
          format: uri
          description: The URL where the customer should be redirected to after the
            payment. For legacy purposes only, use `callback_payload` instead.
        callback_payload:
          allOf:
          - $ref: '#/components/schemas/SDKSuccessCallback'
          description: This payload must be forwarder as is to `successCallback` method.
      required:
      - callback_payload
      - message
    ExternalOperation:
      type: object
      properties:
        amount:
          type: string
          readOnly: true
          description: The specific amount for which the operation was performed.
        session_id:
          type: string
          description: The session ID of the parent transaction will be included in
            the webhook payload. This session ID is crucial for associating the webhook
            event with the original transaction, allowing for accurate tracking and
            processing.
          readOnly: true
        order_no:
          type: string
          description: The 'order_no' field indicates the unique order number of the
            parent transaction. This identifier is crucial for tracking and managing
            the related order within its entire lifecycle.
          readOnly: true
        initiator:
          allOf:
          - $ref: '#/components/schemas/InitiatorUser'
          description: If the operation was performed using Basic Auth (and not an
            API Key), this field contains the details of the `initiator` who started
            the operation.
        is_sandbox:
          type: boolean
          title: Is Sandbox?
          description: Indicates whether the operation was performed in a test environment
            or not.
        operation:
          enum:
          - capture
          - refund
          - void
          type: string
          description: Identifies the operation that was executed.
          readOnly: true
        pg_code:
          type: string
          description: Represents the `pg_code` of the Payment Gateway settings which
            was used to perform the operation.
        pg_response:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Contains the raw response from the payment gateway (PG) for
            the operation (`pg_response`). It will always be a valid JSON.
        reference_number:
          type: string
          readOnly: true
          description: A unique reference_number assigned by Ottu for the performed
            operation. It's also sent to the PG and can be used as a reconciliation
            parameter.
        source:
          enum:
          - input
          - pg
          type: string
          description: Can have one of two values - `input` or `pg`. If `input`, it
            means the operation was performed in an API call triggered by the merchant.
            If `pg`, it means the operation was done on the PG management dashboard,
            and the PG notified Ottu via webhook. The `pg` value will always be notified
            to the webhook, never in an API call.
          readOnly: true
        success:
          type: boolean
          readOnly: true
          description: Indicates whether the operation was successful or not (`success=True`
            or `success=False`).
        result:
          enum:
          - success
          - failed
          type: string
          description: The result of the operation - whether it was successful or
            not.
          readOnly: true
        signature:
          type: string
          readOnly: true
          description: 'Signature Field: A cryptographic hash used to guarantee data
            integrity and authenticity during client-server exchanges. This hash ensures
            that the API payload has not been tampered with, and can only be verified
            by authorized parties.'
        timestamp_utc:
          type: string
          format: date-time
          description: Specifies the time when the operation was performed, in the
            UTC timezone.
        txn:
          allOf:
          - $ref: '#/components/schemas/ChildPayment'
          readOnly: true
          description: Every operation results in the creation of a payment transaction
            (`txn`), which is a child of the payment transaction against which the
            operation is performed. This child transaction holds all the details of
            the operation.
      required:
      - amount
      - operation
      - order_no
      - pg_response
      - reference_number
      - result
      - session_id
      - signature
      - source
      - success
      - timestamp_utc
      - txn
    ExtraInner:
      type: object
      description: |-
        Serializer for extra data aka dynamic fields.
        Extra data can accept any value by default. However,
        if the merchant wants to enforce a specific type, they can
        use the plugins.Field class to do so. All CUSTOM fields are
        validated inside extra field.

        Implementation:
            - requires to have a config property in the parent
            serializer which has to return a PluginConfig instance,
            to which fields are attached.
      properties:
        property_name_en:
          type: string
        tenant_name_en:
          type: string
        unit_number:
          type: string
        contract_number:
          type: string
        contract_amount:
          type: string
        payment_month:
          type: string
        payment_year:
          type: string
        student_name:
          type: string
        tshirt_size_345678:
          type: string
        payment_description:
          type: string
        full_name:
          type: string
        description:
          type: string
        country:
          type: string
        adm:
          type: string
        payment_category_name:
          type: string
        payment_category_amount:
          type: string
        phone:
          type: string
        requester_name:
          type: string
        purpose_desc:
          type: string
        udf5_value:
          type: string
        payee_name:
          type: string
        purpose_code:
          type: string
        remarks:
          type: string
        user:
          enum:
          - fawaz
          - allan
          - saif
          type: string
          description: |-
            * `fawaz` - Fawaz
            * `allan` - Allan
            * `saif` - Saif
      required:
      - adm
      - description
      - full_name
      - payment_category_amount
      - payment_category_name
      - payment_description
      - payment_year
      - phone
      - property_name_en
      - purpose_desc
      - remarks
      - requester_name
      - student_name
      - tshirt_size_345678
      - udf5_value
      - user
    FieldErrors:
      type: object
      properties:
        field_name:
          type: array
          items:
            type: string
            default: This field is required.
    GenericError:
      type: object
      properties:
        message:
          type: string
          default: generic error.
    GenericErrorMessage:
      type: object
      properties:
        detail:
          type: string
      required:
      - detail
    GooglePayConfigOutput:
      type: object
      description: Base serializer for payment configuration, to be used in SDK clients
        like web and mobile.
      properties:
        code:
          type: string
          description: The payment service code.
          pattern: ^[-a-zA-Z0-9_]+$
        environment:
          enum:
          - TEST
          - PRODUCTION
          type: string
          description: |-
            This field specifies the environment to use for the payment, either 'TEST' or 'PRODUCTION'. In the TEST environment, transactions are not processed and can be used to test the integration. In the PRODUCTION environment, transactions are processed and real money is involved

            * `TEST` - TEST
            * `PRODUCTION` - PRODUCTION
        gateway:
          type: string
          nullable: true
          description: This field specifies the name of the payment gateway to use.
            Payment gateways are third-party services that facilitate payment transactions
            between merchants and customers. If this field is not provided, the default
            payment gateway configured on the backend will be used.
          maxLength: 24
        gateway_merchant_id:
          type: string
          description: This field specifies the merchant ID for the payment gateway.
            This ID is used by the payment gateway to identify the merchant and route
            the payment transaction to the correct account. If you are unsure what
            value to use for this field, please consult the documentation provided
            by your payment gateway provider.
          maxLength: 256
        merchant_id:
          type: string
          description: This field specifies the ID of the merchant accepting the payment.
            This ID is used by Google Pay to identify the merchant and associate the
            payment transaction with the correct merchant account.
          maxLength: 100
        merchant_name:
          type: string
          description: This field specifies the name of the merchant accepting the
            payment. This name will be displayed to the user during the payment process
            and on their payment confirmation
          maxLength: 25
        total_price:
          type: string
          description: This field specifies the total price for the payment, including
            any fees. The price should be formatted as a string with the decimal point
            as a period, e.g. '10.99'.
          maxLength: 20
        currency_code:
          type: string
          description: This field specifies the ISO 4217 currency code for the payment.
            This code is used to specify the currency of the payment transaction.
            If you are unsure what value to use for this field, please consult the
            documentation provided by your payment gateway provider.
          maxLength: 10
        country_code:
          type: string
          description: This field specifies the ISO 3166-1 alpha-2 country code for
            the payment currency. This code is used to specify the country of the
            payment transaction. If you are unsure what value to use for this field,
            please consult the documentation provided by your payment gateway provider.
          maxLength: 2
        fee:
          type: string
          description: The fee for the payment.
          maxLength: 20
        fee_description:
          type: string
          description: This field provides the label for any additional transaction
            fee. In the SDK, this label will be displayed prominently during the checkout
            process to inform the payer about the nature of the fee. Ensure to incorporate
            this field in a clear and visible manner within the checkout UI to maintain
            transparency with the end-users.
          maxLength: 128
        payment_url:
          type: string
          format: uri
          description: The URL to use for submitting the payment.
          maxLength: 2000
      required:
      - code
      - country_code
      - currency_code
      - environment
      - fee
      - fee_description
      - gateway
      - gateway_merchant_id
      - merchant_id
      - merchant_name
      - payment_url
      - total_price
    GooglePayPayRejectedResponse:
      oneOf:
      - $ref: '#/components/schemas/DevicePayViewCancelResponse'
      - $ref: '#/components/schemas/DevicePayViewErrorResponse'
    GooglePayPaymentData:
      type: object
      description: |-
        Serializer for Google Pay payment, which is used to validate
        the payment data sent from the SDK client.

        OrderSerializer must be added also in the mixin classes
        for minimal amount validation

        This deserialize the data sent from the SDK client, namely the
        paymentData https://developers.google.com/pay/api/web/reference/response-objects#PaymentData

        {
            "apiVersion": 2,
            "apiVersionMinor": 0,
            "paymentMethodData": {
                "type": "CARD",
                "description": "Visa 1234",
                "info": {
                    "cardNetwork": "VISA",
                    "cardDetails": "1234",
                    "billingAddress": {
                        "name": "John Smith",
                        "phoneNumber": "+16505551234",
                        "postalAddress": {
                            "addressLines": ["1234 Main Street"],
                            "locality": "Mountain View",
                            "administrativeArea": "CA",
                            "postalCode": "94043",
                            "countryCode": "US",
                        },
                    },
                },
                "tokenizationData": {
                    "type": "PAYMENT_GATEWAY",
                    "token": "dummy_payment_token",
                },
            },
            "email": "customer@example.com",
            "shippingAddress": {
                "name": "John Smith",
                "phoneNumber": "+16505551234",
                "postalAddress": {
                    "addressLines": ["1234 Main Street"],
                    "locality": "Mountain View",
                    "administrativeArea": "CA",
                    "postalCode": "94043",
                    "countryCode": "US",
                },
            },
        }
      properties:
        apiVersion:
          type: integer
          description: The version of the Google Pay API used to process the payment.
        apiVersionMinor:
          type: integer
          description: The minor version of the Google Pay API used to process the
            payment.
        paymentMethodData:
          allOf:
          - $ref: '#/components/schemas/PaymentMethodData'
          description: The payment method data.
        email:
          type: string
          format: email
          description: The email address of the customer.
        shippingAddress:
          type: object
          additionalProperties: {}
          description: The shipping address of the customer.
      required:
      - apiVersion
      - apiVersionMinor
      - paymentMethodData
    Header:
      type: object
      properties:
        ephemeralPublicKey:
          type: string
        wrappedKey:
          type: string
        publicKeyHash:
          type: string
        transactionId:
          type: string
      required:
      - publicKeyHash
      - transactionId
    Initiator:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        phone:
          type: string
          title: Phone number
          maxLength: 128
      required:
      - email
      - id
      - username
    InitiatorUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 32
        last_name:
          type: string
          maxLength: 32
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        phone:
          type: string
          title: Phone number
          maxLength: 128
      required:
      - email
      - id
      - username
    InquiryErrors:
      oneOf:
      - $ref: '#/components/schemas/FieldErrors'
      - $ref: '#/components/schemas/InquiryFailure'
    InquiryFailure:
      type: object
      properties:
        detail:
          type: string
          description: Provides a message associated with the operation, suitable
            for displaying to the end user.
        result:
          enum:
          - failed
          type: string
          description: '* `failed` - Failed'
      required:
      - detail
      - result
    InquiryRequest:
      type: object
      description: This serializer is used to validate the lookup fields for the inquiry
        operation.
      properties:
        order_no:
          type: string
          description: This is an optional identifier used to specify the payment
            transaction upon which the operation should be performed. You can use
            either the `order_no` or `session_id` field; at least one of these two
            identifiers must be provided to select the payment transaction that should
            be actioned.
          maxLength: 128
        session_id:
          type: string
          description: Similar to `order_no`, `session_id` is an optional identifier
            used to specify the payment transaction for the operation. You must provide
            either `order_no` or `session_id` in order to select the appropriate payment
            transaction.
          maxLength: 128
    InternalOperation:
      type: object
      properties:
        detail:
          type: string
          description: Provides a message associated with the operation, suitable
            for displaying to the end user.
        operation:
          enum:
          - refund
          - void
          - capture
          - delete
          - cancel
          - expire
          type: string
          description: |-
            Specifies the executed operation. It can be either `delete`, `cancel`, or `expire`.

            * `refund` - Refund
            * `void` - Void
            * `capture` - Capture
            * `delete` - Delete
            * `cancel` - Cancel
            * `expire` - Expire
        result:
          enum:
          - success
          - failed
          type: string
          description: |-
            Indicates the outcome of the operation. `success` denotes a successful operation.

            * `success` - Success
            * `failed` - Failed
      required:
      - detail
      - operation
      - result
    InvoiceClientErrors:
      oneOf:
      - $ref: '#/components/schemas/FieldErrors'
      - $ref: '#/components/schemas/NestedFieldErrors'
      - $ref: '#/components/schemas/GenericErrorMessage'
    InvoiceItem:
      type: object
      description: |-
        Serializer to use for `InvoiceItem` instances.

        The unit_price, quantity, description and sku fields are required.
        The rest are optional.

        The class includes a method to calculate the discount on the invoice and another to calculate the total values.
      properties:
        id:
          type: integer
          readOnly: true
        invoice:
          type: integer
          nullable: true
          description: Associated invoice.
        sku:
          type: string
          description: Unique identifier for the invoice item.
          maxLength: 255
        description:
          type: string
          description: Product name or a brief description of the item.
          maxLength: 255
        quantity:
          type: string
          format: decimal
          description: Number of units of the product.
        unit_price:
          type: string
          format: decimal
          description: Price per unit of the product, excluding tax.
        tax_rate:
          type: string
          format: decimal
          description: Tax rate applied to the invoice item.
        tax_amount:
          type: string
          format: decimal
          description: Total tax amount for the invoice item.
        discount_percentage:
          type: string
          format: decimal
          description: Percentage-based discount applied to the invoice item. The
            calculated discount cannot exceed theitem's total value, including tax.
        discount_amount:
          type: string
          format: decimal
          description: Fixed amount discount applied to the invoice item. The discount
            cannot exceed the item's total value, including tax.
        total_excl_tax:
          type: string
          format: decimal
          description: Total value of the invoice item, excluding tax. This is calculated
            as (unit_price * quantity) - discount.
        total_incl_tax:
          type: string
          format: decimal
          description: Total value of the invoice item, including tax. This is calculated
            as (unit_price * quantity) - discount + applicable tax.
        currency_code:
          type: string
          description: 'For internal purposes: it''ll be overridden by the main currency_code'
      required:
      - currency_code
      - description
      - id
      - quantity
      - sku
      - unit_price
    InvoicePOSTRequest:
      type: object
      description: |-
        Serializer class for `Invoice` instances, inheriting from `BaseInvoiceSerializer` and
        `CheckoutSerializer`. It provides methods for creating invoices, invoice items, and transactions.
      properties:
        currency_code:
          type: string
          description: The specified currency represents the denomination of the transaction.Nevertheless,
            it doesn't necessarily mandate payment in this exact currency.Due to potential
            currency conversions or exchanges, the final charge may be in a different
            currency.
        due_date:
          type: string
          format: date
          description: The date by which the customer is expected to make payment
            for the invoice.
        invoice_items:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceItem'
          description: The list of items for the invoice.
        invoice_number:
          type: string
          description: A unique identifier for the invoice, typically used for tracking
            and referencing purposes.
          maxLength: 255
        pg_codes:
          type: array
          items:
            type: string
          title: Gateway
          description: The list of payment gateway codes from which a customer can
            select to perform the payment
        type:
          enum:
          - e_commerce
          - payment_request
          type: string
          description: |-
            The type of the payment transaction. This field represents the purpose of the payment and can be one of several pre-defined choices.

            * `e_commerce` - Ecommerce
            * `payment_request` - Payment Request
        billing_address:
          $ref: '#/components/schemas/Address'
        shipping_address:
          $ref: '#/components/schemas/ShippingAddress'
        agreement:
          allOf:
          - $ref: '#/components/schemas/Agreement'
          description: "An established contractual arrangement with the payer, which\
            \ authorizes you to securely store and subsequently utilize their payment\
            \ information for specific purposes. This could encompass arrangements\
            \ like recurring payments for services such as mobile subscriptions, installment-based\
            \ payments for purchases, arrangements for ad-hoc charges like account\
            \ top-ups, or for standard industry practices like penalty charges for\
            \ missed appointments. \n\nNote: If your intention is solely to store\
            \ payment details for transactions initiated by the payer in the future,\
            \ then this parameter group should not be used."
        amount:
          type: string
          format: decimal
          description: Represents the total amount of the payment transaction, which
            includes the cost of the purchased items or services but excludes any
            additional fees or charges
        attachment:
          type: string
          format: uri
          description: 'A writable field that accepts an attachment file to be included
            in email notifications sent to the customer regarding their payment, and
            also be available for download on the checkout page. This field may be
            used to provide the customer with additional information or documentation
            related to their purchase. The value of this field should be a file object.
            Upon successful submission, the API will return the URL for downloading
            the attached file. '
        attachment_short_url:
          type: string
          format: uri
          readOnly: true
          description: A short URL that links to the attachment associated with this
            payment. This URL may be included in email/sms notifications sent to the
            customer regarding their payment or displayed on the checkout page to
            allow the customer to easily access the attachment.
        attachment_upload_url:
          type: string
          description: A writable field that accepts an attachment that has already
            been uploaded to the server.
          pattern: (?:pdf|jpeg|png|doc|docx|jpg|xls|xlsx|txt)$
        card_acceptance_criteria:
          allOf:
          - $ref: '#/components/schemas/CardAcceptanceCriteria'
          description: |-
            This field allows you to define specific rules and conditions that a card must meet to be eligible for payment. These stipulations apply regardless of whether a customer chooses to pay using a saved card or opts to add a new card for the transaction. By leveraging the `card_acceptance_criteria`, you gain the power to fine-tune your payment processing strategy, tailoring acceptance rules to align with your business needs, security standards, and risk management policies.

            **Example**: If you run an exclusive service that caters predominantly to premium customers, you might set criteria that only allow transactions from high-tier credit cards like VISA Platinum. This ensures that payments align with the exclusivity and branding of your services. Remember to configure these criteria thoughtfully. Striking the right balance between security, risk mitigation, and user experience is paramount.

            **Note**: The `card_acceptance_criteria` field is applicable only for direct payments and not for hosted session payments.
        checkout_short_url:
          type: string
          format: uri
          readOnly: true
          description: A short URL link that, when opened, redirects to the checkout
            page for this payment. This URL may be shared with the customer to allow
            them to easily access and complete the payment. This field is only available
            if the `shortify_checkout_url` field is set to True.
        checkout_url:
          type: string
          format: uri
          readOnly: true
          description: URL that directs the customer to the Ottu Checkout Page where
            they can see the payment details and available payment methods for the
            transaction. If you need to share the payment link over SMS or WhatsApp,
            use `checkout_short_url` instead.
        company_name:
          type: string
          description: The company name is used for invoice API.
          maxLength: 64
        customer_email:
          type: string
          format: email
          description: The email address of the customer that is used to send payment
            notifications and receipts, and can be used for fraud prevention. This
            field is mandatory and is always sent to the payment gateway. It may also
            be included in the invoice, receipt, email, and displayed on the payment
            page.
          maxLength: 128
        customer_first_name:
          type: string
          description: The first name of the recipient of the payment. This field
            is used for various communications such as the invoice, receipt, email,
            SMS, or displayed on the payment page. It may also be sent to the payment
            gateway if necessary.
          maxLength: 64
        customer_id:
          type: string
          description: The customer ID is a unique identifier for the customer within
            the merchant's system. It is also used as a merchant identifier for the
            customer and plays a critical role in tokenization. All the customer's
            cards will be associated with this ID.
          maxLength: 64
        customer_last_name:
          type: string
          description: The last name of the recipient of the payment. This field is
            used for various communications such as the invoice, receipt, email, SMS,
            or displayed on the payment page. It may also be sent to the payment gateway
            if necessary.
          maxLength: 64
        customer_phone:
          type: string
          description: Customer phone number associated with the payment. This might
            be sent to the payment gateway and depending on the gateway, it may trigger
            a click to pay process on the payment page. The phone number will also
            be included in the invoice, receipt, email, and displayed on the payment
            page.
          maxLength: 16
        discount_amount:
          type: string
          format: decimal
          description: The fixed amount discount applied to the full invoice amount,
            including taxes. If set, the discount_percentage field will be set to
            null. Both discount_amount and discount_percentage cannot be set simultaneously.
            The discount cannot be higher than the `total_excl_tax` field.
        discount_percentage:
          type: string
          format: decimal
          description: The percentage-based discount applied to the full invoice amount,
            including taxes. If set, the discount_amount field will be automatically
            calculated. Both discount_amount and discount_percentage cannot be set
            simultaneously. The discount cannot be higher than the `total_excl_tax`
            field.
        due_datetime:
          type: string
          format: date-time
          title: Due date and time
          description: The date and time by which the payment is due. This field may
            be used to help remind the customer to complete the payment before the
            due date.
        email_recipients:
          type: array
          items:
            type: string
            format: email
          description: A comma-separated list of email addresses for internal recipients
            who will receive customer emails. These recipients will be included in
            email notifications sent to the customer regarding their payment.
        expiration_time:
          type: string
          description: If defined, any payment transactions created more than the
            specified period of time ago will be invalidated or expired if the customer
            attempts to complete them. By default, this expiration period is set to
            24 hours from the time of transaction creation. This feature helps ensure
            that payment transactions are processed promptly.
        extra:
          allOf:
          - $ref: '#/components/schemas/ExtraInner'
          description: The extra information for the payment details, which the merchant
            has sent it in key value form.
        generate_qr_code:
          type: boolean
          writeOnly: true
          default: false
          description: If set to true, the `qr_code_url` field will be present in
            the response. Upon scanning it, the customer will be redirected to the
            checkout_url, which is the Ottu Checkout page.
        include_sdk_setup_preload:
          type: boolean
          writeOnly: true
          default: false
          description: Set this to true to include the 'sdk_setup_preload_payload'
            payload in the API response. This payload is only generated and added
            when this parameter is explicitly set to true. By default, it is false
            and the 'sdk_setup_preload_payload' payload will not be included.
        initiator_id:
          type: integer
          readOnly: true
          title: initiator
          description: The user who initiated the creation of this payment transaction,
            if available. This field is optional and may be used to track who created
            the payment transaction. Note that if the payment transaction was created
            via the Checkout API using an API-Key, no initiator will be associated
            with the payment.
        invoice_id:
          type: integer
          readOnly: true
        language:
          enum:
          - en
          - ar
          type: string
          default: en
          description: |-
            This field specifies the language to be used for communication with the customer, including the payment page, receipt, invoice, email, SMS, and any other communications related to the payment transaction.

            * `en` - English
            * `ar` - Arabic
        notifications:
          allOf:
          - $ref: '#/components/schemas/Notifications'
          title: Notification settings
          description: A JSON field that contains the notification settings for this
            payment transaction, including SMS and email notifications, as well as
            the events for which they will be sent (e.g., 'created', 'paid', 'refund',
            'canceled', etc.). This field may be used to configure and customize the
            notifications sent to customers and internal recipients throughout the
            payment process.
        operation:
          type: string
          readOnly: true
          description: Specifies the type of operation to be performed by the payment
            gateway. If set to `purchase`, the payment source will be directly charged.
            If set to `authorize`, the payment source will only be authorized and
            the actual charge will be made at a later time.
        order_no:
          type: string
          description: The unique identifier assigned to this payment transaction.
            It is used for tracking purposes and is set by the merchant or the system.
          maxLength: 128
        payment_methods:
          allOf:
          - $ref: '#/components/schemas/PaymentMethodsForRedirect'
          readOnly: true
          description: An array containing all the payment methods derived from the
            `pg_codes` input. Each object in the array contains information about
            a single payment gateway, including its icon and the `redirect_url` that
            will redirect the customer to the payment gateway's payment page.
        payment_type:
          enum:
          - one_off
          - auto_debit
          type: string
          default: one_off
          description: "Type of payment. Choose `one_off` for payments that occur\
            \ only once without future commitments. Choose `auto_debit` for payments\
            \ that are automatically deducted, such as recurring subscriptions, installments,\
            \ or unscheduled auto-debits. \n\nNOTE: If `auto_debit` is selected: \n\
            1. `agreement` and `customer_id` parameters will also be mandatory. \n\
            2. Only PG codes supporting tokenization can be selected. \nAs a side\
            \ effect, the card used for the payment will be associated with the supplied\
            \ `agreement.id`. This card will be locked, preventing the customer from\
            \ deleting it from the system until an alternate card is chosen for auto-debit\
            \ payments.\n\n* `one_off` - One Off\n* `auto_debit` - Auto Debit"
        product_type:
          type: string
          description: The type of product or service being purchased. This field
            may be used for tracking and reporting purposes.
          maxLength: 128
        qr_code_url:
          type: string
          format: uri
          readOnly: true
          description: A QR code that, when scanned, redirects to the checkout page
            for this payment. This QR code may be displayed on invoices, receipts,
            or other documents to allow customers to easily access the checkout page
            and make a payment. This parameter is only present when `generate_qr_code`
            is set to true.
        redirect_url:
          type: string
          format: uri
          description: The URL where the customer will be redirected after the payment
            stage only if the webhook URL returns a success status. `order_no`, `reference_number`
            and `session_id` will be appended to the redirect URL as query parameters.
          maxLength: 200
        sdk_setup_preload_payload:
          allOf:
          - $ref: '#/components/schemas/CheckoutSDK'
          readOnly: true
          default: false
          description: A JSON object containing preloaded data required to initialize
            the checkout interface.This includes essential details such as customer
            information, available payment methods.and specific transaction details,
            all formatted according to the Checkout SDK's initialization specifications.This
            field streamlines the checkout process by providing necessary information
            upfront.enhancing user experience and efficiency.
        session_id:
          type: string
          readOnly: true
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
        shipping_excl_tax:
          type: string
          format: decimal
          title: Shipping Excl. Tax
          description: The cost of shipping for the invoice, excluding taxes.
        shipping_incl_tax:
          type: string
          format: decimal
          title: Shipping Incl. Tax
          description: The cost of shipping for the invoice, including all applicable
            taxes.
        shipping_method:
          type: string
          description: The method or service used for shipping the items associated
            with the invoice.
        shipping_tax_rate:
          type: string
          format: decimal
          description: 'The tax rate applied to the shipping cost, expressed as a
            percentage. '
        shortify_attachment_url:
          type: boolean
          writeOnly: true
          default: false
          description: If set to True, the URL of the uploaded attachment will be
            shortened using a URL shortener service. This should be used when sharing
            the attachment URL via SMS or WhatsApp.
        shortify_checkout_url:
          type: boolean
          writeOnly: true
          default: false
          description: If set to True, the checkout URL will be shortened using a
            URL shortener service. This should be used when sharing the payment URL
            via SMS or WhatsApp.
        state:
          enum:
          - created
          - pending
          - attempted
          - authorized
          - paid
          - failed
          - canceled
          - expired
          - invalided
          - refunded
          - cod
          type: string
          readOnly: true
          description: |-
            The current state of the payment transaction, it helps to understand the progress of the payment.

            * `created` - Created
            * `pending` - Pending
            * `attempted` - Attempted
            * `authorized` - Authorized
            * `paid` - Paid
            * `failed` - Failed
            * `canceled` - Canceled
            * `expired` - Expired
            * `invalided` - Invalided
            * `refunded` - Refunded
            * `cod` - Cash on Delivery
        status:
          enum:
          - sent
          - paid
          - overdue
          - canceled
          type: string
          readOnly: true
          description: |-
            Current status of the invoice. Can be one of the following: `sent`, `paid`, `overdue`, `canceled`.

            * `sent` - Sent
            * `paid` - Paid
            * `overdue` - Overdue
            * `canceled` - Canceled
        subtotal:
          type: string
          format: decimal
          description: Sum of total_incl_tax's of all invoice items.
        tax_amount:
          type: string
          format: decimal
          description: The total amount of tax applied to the invoice.
        tax_rate:
          type: string
          format: decimal
          title: Tax
          description: The tax rate applied to the invoice, expressed as a percentage.
        total_excl_tax:
          type: string
          format: decimal
          title: Total Excl. Tax
          description: The total amount of the invoice, excluding taxes.
        total_incl_tax:
          type: string
          format: decimal
          title: Total Incl. Tax
          description: The total amount of the invoice, including all applicable taxes.
        unit_code:
          type: string
          writeOnly: true
          title: Unit
          description: The slug of the unit to be used for the transaction.
        vendor_name:
          type: string
          description: The name of the vendor or merchant associated with this payment.
            This field may be used for accounting and reporting purposes.
          maxLength: 64
        webhook_url:
          type: string
          format: uri
          description: 'URL where the payment result will be sent via a POST request
            after the customer has completed the payment session. The payment result
            will be included in the request body. '
      required:
      - attachment_short_url
      - checkout_short_url
      - checkout_url
      - currency_code
      - due_date
      - initiator_id
      - invoice_id
      - invoice_items
      - invoice_number
      - operation
      - payment_methods
      - pg_codes
      - qr_code_url
      - sdk_setup_preload_payload
      - session_id
      - state
      - status
      - type
    InvoicePOSTResponse:
      type: object
      description: |-
        Serializer class for `Invoice` instances, inheriting from `BaseInvoiceSerializer` and
        `CheckoutSerializer`. It provides methods for creating invoices, invoice items, and transactions.
      properties:
        currency_code:
          type: string
          description: The specified currency represents the denomination of the transaction.Nevertheless,
            it doesn't necessarily mandate payment in this exact currency.Due to potential
            currency conversions or exchanges, the final charge may be in a different
            currency.
        due_date:
          type: string
          format: date
          description: The date by which the customer is expected to make payment
            for the invoice.
        invoice_items:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceItem'
          description: The list of items for the invoice.
        invoice_number:
          type: string
          description: A unique identifier for the invoice, typically used for tracking
            and referencing purposes.
          maxLength: 255
        pg_codes:
          type: array
          items:
            type: string
          title: Gateway
          description: The list of payment gateway codes from which a customer can
            select to perform the payment
        type:
          enum:
          - e_commerce
          - payment_request
          type: string
          description: |-
            The type of the payment transaction. This field represents the purpose of the payment and can be one of several pre-defined choices.

            * `e_commerce` - Ecommerce
            * `payment_request` - Payment Request
        billing_address:
          $ref: '#/components/schemas/Address'
        shipping_address:
          $ref: '#/components/schemas/ShippingAddress'
        agreement:
          allOf:
          - $ref: '#/components/schemas/Agreement'
          description: "An established contractual arrangement with the payer, which\
            \ authorizes you to securely store and subsequently utilize their payment\
            \ information for specific purposes. This could encompass arrangements\
            \ like recurring payments for services such as mobile subscriptions, installment-based\
            \ payments for purchases, arrangements for ad-hoc charges like account\
            \ top-ups, or for standard industry practices like penalty charges for\
            \ missed appointments. \n\nNote: If your intention is solely to store\
            \ payment details for transactions initiated by the payer in the future,\
            \ then this parameter group should not be used."
        amount:
          type: string
          format: decimal
          description: Represents the total amount of the payment transaction, which
            includes the cost of the purchased items or services but excludes any
            additional fees or charges
        attachment:
          type: string
          format: uri
          description: 'A writable field that accepts an attachment file to be included
            in email notifications sent to the customer regarding their payment, and
            also be available for download on the checkout page. This field may be
            used to provide the customer with additional information or documentation
            related to their purchase. The value of this field should be a file object.
            Upon successful submission, the API will return the URL for downloading
            the attached file. '
        attachment_short_url:
          type: string
          format: uri
          readOnly: true
          description: A short URL that links to the attachment associated with this
            payment. This URL may be included in email/sms notifications sent to the
            customer regarding their payment or displayed on the checkout page to
            allow the customer to easily access the attachment.
        attachment_upload_url:
          type: string
          description: A writable field that accepts an attachment that has already
            been uploaded to the server.
          pattern: (?:pdf|jpeg|png|doc|docx|jpg|xls|xlsx|txt)$
        card_acceptance_criteria:
          allOf:
          - $ref: '#/components/schemas/CardAcceptanceCriteria'
          description: |-
            This field allows you to define specific rules and conditions that a card must meet to be eligible for payment. These stipulations apply regardless of whether a customer chooses to pay using a saved card or opts to add a new card for the transaction. By leveraging the `card_acceptance_criteria`, you gain the power to fine-tune your payment processing strategy, tailoring acceptance rules to align with your business needs, security standards, and risk management policies.

            **Example**: If you run an exclusive service that caters predominantly to premium customers, you might set criteria that only allow transactions from high-tier credit cards like VISA Platinum. This ensures that payments align with the exclusivity and branding of your services. Remember to configure these criteria thoughtfully. Striking the right balance between security, risk mitigation, and user experience is paramount.

            **Note**: The `card_acceptance_criteria` field is applicable only for direct payments and not for hosted session payments.
        checkout_short_url:
          type: string
          format: uri
          readOnly: true
          description: A short URL link that, when opened, redirects to the checkout
            page for this payment. This URL may be shared with the customer to allow
            them to easily access and complete the payment. This field is only available
            if the `shortify_checkout_url` field is set to True.
        checkout_url:
          type: string
          format: uri
          readOnly: true
          description: URL that directs the customer to the Ottu Checkout Page where
            they can see the payment details and available payment methods for the
            transaction. If you need to share the payment link over SMS or WhatsApp,
            use `checkout_short_url` instead.
        company_name:
          type: string
          description: The company name is used for invoice API.
          maxLength: 64
        customer_email:
          type: string
          format: email
          description: The email address of the customer that is used to send payment
            notifications and receipts, and can be used for fraud prevention. This
            field is mandatory and is always sent to the payment gateway. It may also
            be included in the invoice, receipt, email, and displayed on the payment
            page.
          maxLength: 128
        customer_first_name:
          type: string
          description: The first name of the recipient of the payment. This field
            is used for various communications such as the invoice, receipt, email,
            SMS, or displayed on the payment page. It may also be sent to the payment
            gateway if necessary.
          maxLength: 64
        customer_id:
          type: string
          description: The customer ID is a unique identifier for the customer within
            the merchant's system. It is also used as a merchant identifier for the
            customer and plays a critical role in tokenization. All the customer's
            cards will be associated with this ID.
          maxLength: 64
        customer_last_name:
          type: string
          description: The last name of the recipient of the payment. This field is
            used for various communications such as the invoice, receipt, email, SMS,
            or displayed on the payment page. It may also be sent to the payment gateway
            if necessary.
          maxLength: 64
        customer_phone:
          type: string
          description: Customer phone number associated with the payment. This might
            be sent to the payment gateway and depending on the gateway, it may trigger
            a click to pay process on the payment page. The phone number will also
            be included in the invoice, receipt, email, and displayed on the payment
            page.
          maxLength: 16
        discount_amount:
          type: string
          format: decimal
          description: The fixed amount discount applied to the full invoice amount,
            including taxes. If set, the discount_percentage field will be set to
            null. Both discount_amount and discount_percentage cannot be set simultaneously.
            The discount cannot be higher than the `total_excl_tax` field.
        discount_percentage:
          type: string
          format: decimal
          description: The percentage-based discount applied to the full invoice amount,
            including taxes. If set, the discount_amount field will be automatically
            calculated. Both discount_amount and discount_percentage cannot be set
            simultaneously. The discount cannot be higher than the `total_excl_tax`
            field.
        due_datetime:
          type: string
          format: date-time
          title: Due date and time
          description: The date and time by which the payment is due. This field may
            be used to help remind the customer to complete the payment before the
            due date.
        email_recipients:
          type: array
          items:
            type: string
            format: email
          description: A comma-separated list of email addresses for internal recipients
            who will receive customer emails. These recipients will be included in
            email notifications sent to the customer regarding their payment.
        expiration_time:
          type: string
          description: If defined, any payment transactions created more than the
            specified period of time ago will be invalidated or expired if the customer
            attempts to complete them. By default, this expiration period is set to
            24 hours from the time of transaction creation. This feature helps ensure
            that payment transactions are processed promptly.
        extra:
          allOf:
          - $ref: '#/components/schemas/ExtraInner'
          description: The extra information for the payment details, which the merchant
            has sent it in key value form.
        generate_qr_code:
          type: boolean
          writeOnly: true
          default: false
          description: If set to true, the `qr_code_url` field will be present in
            the response. Upon scanning it, the customer will be redirected to the
            checkout_url, which is the Ottu Checkout page.
        include_sdk_setup_preload:
          type: boolean
          writeOnly: true
          default: false
          description: Set this to true to include the 'sdk_setup_preload_payload'
            payload in the API response. This payload is only generated and added
            when this parameter is explicitly set to true. By default, it is false
            and the 'sdk_setup_preload_payload' payload will not be included.
        initiator_id:
          type: integer
          readOnly: true
          title: initiator
          description: The user who initiated the creation of this payment transaction,
            if available. This field is optional and may be used to track who created
            the payment transaction. Note that if the payment transaction was created
            via the Checkout API using an API-Key, no initiator will be associated
            with the payment.
        invoice_id:
          type: integer
          readOnly: true
        language:
          enum:
          - en
          - ar
          type: string
          default: en
          description: |-
            This field specifies the language to be used for communication with the customer, including the payment page, receipt, invoice, email, SMS, and any other communications related to the payment transaction.

            * `en` - English
            * `ar` - Arabic
        notifications:
          allOf:
          - $ref: '#/components/schemas/Notifications'
          title: Notification settings
          description: A JSON field that contains the notification settings for this
            payment transaction, including SMS and email notifications, as well as
            the events for which they will be sent (e.g., 'created', 'paid', 'refund',
            'canceled', etc.). This field may be used to configure and customize the
            notifications sent to customers and internal recipients throughout the
            payment process.
        operation:
          type: string
          readOnly: true
          description: Specifies the type of operation to be performed by the payment
            gateway. If set to `purchase`, the payment source will be directly charged.
            If set to `authorize`, the payment source will only be authorized and
            the actual charge will be made at a later time.
        order_no:
          type: string
          description: The unique identifier assigned to this payment transaction.
            It is used for tracking purposes and is set by the merchant or the system.
          maxLength: 128
        payment_methods:
          allOf:
          - $ref: '#/components/schemas/PaymentMethodsForRedirect'
          readOnly: true
          description: An array containing all the payment methods derived from the
            `pg_codes` input. Each object in the array contains information about
            a single payment gateway, including its icon and the `redirect_url` that
            will redirect the customer to the payment gateway's payment page.
        payment_type:
          enum:
          - one_off
          - auto_debit
          type: string
          default: one_off
          description: "Type of payment. Choose `one_off` for payments that occur\
            \ only once without future commitments. Choose `auto_debit` for payments\
            \ that are automatically deducted, such as recurring subscriptions, installments,\
            \ or unscheduled auto-debits. \n\nNOTE: If `auto_debit` is selected: \n\
            1. `agreement` and `customer_id` parameters will also be mandatory. \n\
            2. Only PG codes supporting tokenization can be selected. \nAs a side\
            \ effect, the card used for the payment will be associated with the supplied\
            \ `agreement.id`. This card will be locked, preventing the customer from\
            \ deleting it from the system until an alternate card is chosen for auto-debit\
            \ payments.\n\n* `one_off` - One Off\n* `auto_debit` - Auto Debit"
        product_type:
          type: string
          description: The type of product or service being purchased. This field
            may be used for tracking and reporting purposes.
          maxLength: 128
        qr_code_url:
          type: string
          format: uri
          readOnly: true
          description: A QR code that, when scanned, redirects to the checkout page
            for this payment. This QR code may be displayed on invoices, receipts,
            or other documents to allow customers to easily access the checkout page
            and make a payment. This parameter is only present when `generate_qr_code`
            is set to true.
        redirect_url:
          type: string
          format: uri
          description: The URL where the customer will be redirected after the payment
            stage only if the webhook URL returns a success status. `order_no`, `reference_number`
            and `session_id` will be appended to the redirect URL as query parameters.
          maxLength: 200
        sdk_setup_preload_payload:
          allOf:
          - $ref: '#/components/schemas/CheckoutSDK'
          readOnly: true
          default: false
          description: A JSON object containing preloaded data required to initialize
            the checkout interface.This includes essential details such as customer
            information, available payment methods.and specific transaction details,
            all formatted according to the Checkout SDK's initialization specifications.This
            field streamlines the checkout process by providing necessary information
            upfront.enhancing user experience and efficiency.
        session_id:
          type: string
          readOnly: true
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
        shipping_excl_tax:
          type: string
          format: decimal
          title: Shipping Excl. Tax
          description: The cost of shipping for the invoice, excluding taxes.
        shipping_incl_tax:
          type: string
          format: decimal
          title: Shipping Incl. Tax
          description: The cost of shipping for the invoice, including all applicable
            taxes.
        shipping_method:
          type: string
          description: The method or service used for shipping the items associated
            with the invoice.
        shipping_tax_rate:
          type: string
          format: decimal
          description: 'The tax rate applied to the shipping cost, expressed as a
            percentage. '
        shortify_attachment_url:
          type: boolean
          writeOnly: true
          default: false
          description: If set to True, the URL of the uploaded attachment will be
            shortened using a URL shortener service. This should be used when sharing
            the attachment URL via SMS or WhatsApp.
        shortify_checkout_url:
          type: boolean
          writeOnly: true
          default: false
          description: If set to True, the checkout URL will be shortened using a
            URL shortener service. This should be used when sharing the payment URL
            via SMS or WhatsApp.
        state:
          enum:
          - created
          - pending
          - attempted
          - authorized
          - paid
          - failed
          - canceled
          - expired
          - invalided
          - refunded
          - cod
          type: string
          readOnly: true
          description: |-
            The current state of the payment transaction, it helps to understand the progress of the payment.

            * `created` - Created
            * `pending` - Pending
            * `attempted` - Attempted
            * `authorized` - Authorized
            * `paid` - Paid
            * `failed` - Failed
            * `canceled` - Canceled
            * `expired` - Expired
            * `invalided` - Invalided
            * `refunded` - Refunded
            * `cod` - Cash on Delivery
        status:
          enum:
          - sent
          - paid
          - overdue
          - canceled
          type: string
          readOnly: true
          description: |-
            Current status of the invoice. Can be one of the following: `sent`, `paid`, `overdue`, `canceled`.

            * `sent` - Sent
            * `paid` - Paid
            * `overdue` - Overdue
            * `canceled` - Canceled
        subtotal:
          type: string
          format: decimal
          description: Sum of total_incl_tax's of all invoice items.
        tax_amount:
          type: string
          format: decimal
          description: The total amount of tax applied to the invoice.
        tax_rate:
          type: string
          format: decimal
          title: Tax
          description: The tax rate applied to the invoice, expressed as a percentage.
        total_excl_tax:
          type: string
          format: decimal
          title: Total Excl. Tax
          description: The total amount of the invoice, excluding taxes.
        total_incl_tax:
          type: string
          format: decimal
          title: Total Incl. Tax
          description: The total amount of the invoice, including all applicable taxes.
        unit_code:
          type: string
          writeOnly: true
          title: Unit
          description: The slug of the unit to be used for the transaction.
        vendor_name:
          type: string
          description: The name of the vendor or merchant associated with this payment.
            This field may be used for accounting and reporting purposes.
          maxLength: 64
        webhook_url:
          type: string
          format: uri
          description: 'URL where the payment result will be sent via a POST request
            after the customer has completed the payment session. The payment result
            will be included in the request body. '
      required:
      - attachment_short_url
      - checkout_short_url
      - checkout_url
      - currency_code
      - due_date
      - initiator_id
      - invoice_id
      - invoice_items
      - invoice_number
      - operation
      - payment_methods
      - pg_codes
      - qr_code_url
      - sdk_setup_preload_payload
      - session_id
      - state
      - status
      - type
    LogEntry:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        action:
          enum:
          - 0
          - 1
          - 2
          - 3
          type: integer
          description: |-
            * `0` - create
            * `1` - update
            * `2` - delete
            * `3` - access
          minimum: 0
          maximum: 65535
        changes:
          type: object
          additionalProperties: {}
        remote_addr:
          type: string
          nullable: true
          title: Remote address
        timestamp:
          type: string
          format: date-time
          readOnly: true
        additional_data:
          type: object
          additionalProperties: {}
          nullable: true
        actor:
          $ref: '#/components/schemas/Initiator'
      required:
      - action
      - actor
      - changes
      - id
      - timestamp
    MailLog:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        is_sent:
          type: boolean
        event_type:
          enum:
          - created
          - paid
          - canceled
          - failed
          - expired
          - authorized
          - voided
          - refunded
          - captured
          - ''
          - null
          type: string
          description: |-
            * `created` - Created
            * `paid` - Paid
            * `canceled` - Canceled
            * `failed` - Failed
            * `expired` - Expired
            * `authorized` - Authorized
            * `voided` - Voided
            * `refunded` - Refunded
            * `captured` - Captured
          nullable: true
        forced:
          type: boolean
        provider:
          type: string
          readOnly: true
        backend:
          type: string
          readOnly: true
        mail_logs:
          type: array
          items:
            $ref: '#/components/schemas/MailLogEmail'
      required:
      - backend
      - created
      - id
      - mail_logs
      - provider
    MailLogEmail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          title: Recipient
          maxLength: 350
        mail_type:
          enum:
          - cc
          - bcc
          - to
          type: string
          description: |-
            * `cc` - CC
            * `bcc` - BCC
            * `to` - TO
      required:
      - email
      - id
      - mail_type
    Nested:
      type: object
      properties:
        field_name:
          type: array
          items:
            type: string
            default: To use sms notifications provide the `customer_phone` field.
      required:
      - field_name
    NestedFieldErrors:
      type: object
      properties:
        field_name:
          $ref: '#/components/schemas/Nested'
      required:
      - field_name
    NotificationSet:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 24
          pattern: ^[-a-zA-Z0-9_]+$
      required:
      - id
      - name
    Notifications:
      type: object
      properties:
        email:
          type: array
          items:
            enum:
            - created
            - paid
            - canceled
            - failed
            - expired
            - authorized
            - voided
            - refunded
            - captured
            type: string
            description: |-
              * `created` - Created
              * `paid` - Paid
              * `canceled` - Canceled
              * `failed` - Failed
              * `expired` - Expired
              * `authorized` - Authorized
              * `voided` - Voided
              * `refunded` - Refunded
              * `captured` - Captured
        sms:
          type: array
          items:
            enum:
            - created
            - paid
            - canceled
            - failed
            - expired
            - authorized
            - voided
            - refunded
            - captured
            type: string
            description: |-
              * `created` - Created
              * `paid` - Paid
              * `canceled` - Canceled
              * `failed` - Failed
              * `expired` - Expired
              * `authorized` - Authorized
              * `voided` - Voided
              * `refunded` - Refunded
              * `captured` - Captured
    Operation:
      type: object
      description: |-
        Fetch the payment txn based on the order no or session id
        also, if the payment txn is not in the accepted state for the
        input operation, raise an error
      properties:
        order_no:
          type: string
          description: This is an optional identifier used to specify the payment
            transaction upon which the operation should be performed. You can use
            either the `order_no` or `session_id` field; at least one of these two
            identifiers must be provided to select the payment transaction that should
            be actioned.
          maxLength: 128
        session_id:
          type: string
          description: Similar to `order_no`, `session_id` is an optional identifier
            used to specify the payment transaction for the operation. You must provide
            either `order_no` or `session_id` in order to select the appropriate payment
            transaction.
          maxLength: 128
        operation:
          enum:
          - delete
          - cancel
          - expire
          - refund
          - capture
          - void
          type: string
          description: |-
            * `delete` - delete
            * `cancel` - cancel
            * `expire` - expire
            * `refund` - refund
            * `capture` - capture
            * `void` - void
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,13}(?:\.\d{0,3})?$
          description: This field is optional and used to specify the amount you want
            to action for `refund` and `capture` operations. If not specified, Ottu
            will attempt to perform the operation on the full amount, or the remaining
            amount if previous operations have been performed. Keep in mind that `void`
            operations always concern the full amount; the `amount` field is not considered
            in this case. The `amount` field can be sent for all operations, but it
            will only be taken into account for `refund` and `capture` operations.
      required:
      - operation
    OperationFailure:
      type: object
      properties:
        detail:
          type: string
          description: Provides a message associated with the operation, suitable
            for displaying to the end user.
        operation:
          enum:
          - delete
          - cancel
          - expire
          - refund
          - capture
          - void
          type: string
          description: |-
            * `delete` - delete
            * `cancel` - cancel
            * `expire` - expire
            * `refund` - refund
            * `capture` - capture
            * `void` - void
        result:
          enum:
          - failed
          type: string
          description: '* `failed` - Failed'
      required:
      - detail
      - operation
      - result
    OttuPGPymtTxn:
      type: object
      properties:
        session_id:
          type: string
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
          maxLength: 128
        payment_type:
          enum:
          - one_off
          - auto_debit
          type: string
          description: "Type of payment. Choose `one_off` for payments that occur\
            \ only once without future commitments. Choose `auto_debit` for payments\
            \ that are automatically deducted, such as recurring subscriptions, installments,\
            \ or unscheduled auto-debits. \n\nNOTE: If `auto_debit` is selected: \n\
            1. `agreement` and `customer_id` parameters will also be mandatory. \n\
            2. Only PG codes supporting tokenization can be selected. \nAs a side\
            \ effect, the card used for the payment will be associated with the supplied\
            \ `agreement.id`. This card will be locked, preventing the customer from\
            \ deleting it from the system until an alternate card is chosen for auto-debit\
            \ payments.\n\n* `one_off` - One Off\n* `auto_debit` - Auto Debit"
        amount:
          type: string
          readOnly: true
          description: Represents the total amount of the payment transaction, which
            includes the cost of the purchased items or services but excludes any
            additional fees or charges
        currency:
          type: string
          readOnly: true
          description: Currency code for the transaction.
        pg_code:
          type: string
          readOnly: true
          description: PG code to be used for this transaction. A payment transaction
            can have onlye one OttuPG code.
        operation:
          enum:
          - purchase
          - authorize
          type: string
          description: Specifies the type of operation to be performed by the payment
            gateway. If set to `purchase`, the payment source will be directly charged.
            If set to `authorize`, the payment source will only be authorized and
            the actual charge will be made at a later time.
          readOnly: true
        language:
          enum:
          - en
          - ar
          type: string
          description: |-
            This field specifies the language to be used for communication with the customer, including the payment page, receipt, invoice, email, SMS, and any other communications related to the payment transaction.

            * `en` - English
            * `ar` - Arabic
        reference_number:
          type: string
          readOnly: true
          description: An auto-generated internal identifier for this payment transaction.
            While this field may be used for tracking and reporting purposes, it is
            recommended to use the session_id field instead, as it provides the same
            functionality and more.
        callback_url:
          type: string
          format: uri
          readOnly: true
          description: Callback URL to be used by Ottu PG to send payment status updates.
        customer:
          allOf:
          - $ref: '#/components/schemas/Customer'
          readOnly: true
        shipping_address:
          allOf:
          - $ref: '#/components/schemas/ShippingAddress'
          readOnly: true
        billing_address:
          allOf:
          - $ref: '#/components/schemas/Address'
          readOnly: true
        order_no:
          type: string
          nullable: true
          description: The unique identifier assigned to this payment transaction.
            It is used for tracking purposes and is set by the merchant or the system.
          maxLength: 128
        redirect_url:
          type: string
          format: uri
          readOnly: true
          description: The URL where the customer will be redirected after the payment
            stage only if the webhook URL returns a success status. `order_no`, `reference_number`
            and `session_id` will be appended to the redirect URL as query parameters.
        agreement:
          allOf:
          - $ref: '#/components/schemas/Agreement'
          description: "An established contractual arrangement with the payer, which\
            \ authorizes you to securely store and subsequently utilize their payment\
            \ information for specific purposes. This could encompass arrangements\
            \ like recurring payments for services such as mobile subscriptions, installment-based\
            \ payments for purchases, arrangements for ad-hoc charges like account\
            \ top-ups, or for standard industry practices like penalty charges for\
            \ missed appointments. \n\nNote: If your intention is solely to store\
            \ payment details for transactions initiated by the payer in the future,\
            \ then this parameter group should not be used."
        card_acceptance_criteria:
          allOf:
          - $ref: '#/components/schemas/CardAcceptanceCriteria'
          description: |-
            This field allows you to define specific rules and conditions that a card must meet to be eligible for payment. These stipulations apply regardless of whether a customer chooses to pay using a saved card or opts to add a new card for the transaction. By leveraging the `card_acceptance_criteria`, you gain the power to fine-tune your payment processing strategy, tailoring acceptance rules to align with your business needs, security standards, and risk management policies.

            **Example**: If you run an exclusive service that caters predominantly to premium customers, you might set criteria that only allow transactions from high-tier credit cards like VISA Platinum. This ensures that payments align with the exclusivity and branding of your services. Remember to configure these criteria thoughtfully. Striking the right balance between security, risk mitigation, and user experience is paramount.

            **Note**: The `card_acceptance_criteria` field is applicable only for direct payments and not for hosted session payments.
      required:
      - amount
      - billing_address
      - callback_url
      - currency
      - customer
      - operation
      - pg_code
      - redirect_url
      - reference_number
      - shipping_address
    PGPaymentMethods:
      type: object
      properties:
        code:
          type: string
          readOnly: true
          description: Indicates the unique code associated with the payment gateway.
            This pivotal identifier facilitates transaction initiation through both
            the dashboard and API.
        name:
          type: string
          readOnly: true
          description: Represents the payment gateway internal name defined in Ottu.
        pg:
          type: string
          readOnly: true
          description: Represents the payment gateway name defined in Ottu to be displayed.
        is_sandbox:
          type: boolean
          readOnly: true
          description: Indicates whether this payment gateway operates in a sandbox
            or production environment.
        logo:
          type: string
          format: uri
          description: Logo to be used in emails/confirmation pages/etc
        wallets:
          type: array
          items: {}
          readOnly: true
          default:
          - ApplePay
          - GooglePay
          description: Denotes a list of payment services linked with this payment
            gateway, such as `GooglePay` and `ApplePay`
        default_currency:
          type: string
          readOnly: true
          default: KWD
          description: Specifies the default currency code for the payment gateway,
            formatted according to ISO 4217.
        accepted_currencies:
          type: array
          items: {}
          readOnly: true
          default:
          - KWD
          - USD
          description: Indicates a list of default accepted currencies for the payment
            gateway, each formatted in accordance with ISO 4217 standards.
        operation:
          type: string
          description: 'Specifies the processing operation type for the payment method:
            either ''authorize'' or ''purchase''. When set to `authorize`, successful
            transactions using this payment method will transition to the `authorize`
            state. Similarly, if set to `purchase`, they will follow the purchase
            flow.'
        operations:
          type: array
          items: {}
          default:
          - refund
          - void
          readOnly: true
          description: Specifies the payment operations that are available for this
            payment gateway.
        is_tokenizable:
          type: boolean
          description: This flag indicates whether tokenization is enabled for this
            payment gateway. When set to true, it allows for the secure storage of
            payment details, enabling future transactions without the need for re-entering
            payment information.
      required:
      - accepted_currencies
      - code
      - default_currency
      - is_sandbox
      - is_tokenizable
      - logo
      - name
      - operation
      - operations
      - pg
      - wallets
    PaginatedUnifiedUIInvoiceList:
      type: object
      properties:
        next:
          type: string
          nullable: true
        previous:
          type: string
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/UnifiedUIInvoice'
    ParentToken:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/Token'
      required:
      - token
    PayApplePay:
      type: object
      description: Handles the incoming Apple Pay payment request
      properties:
        code:
          type: string
          description: Code to identify the service in the API/URLs/etc
        amount:
          type: string
        session_id:
          type: string
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
        apple_pay_payload:
          $ref: '#/components/schemas/ApplePayPayload'
      required:
      - amount
      - apple_pay_payload
      - code
      - session_id
    PayGooglePay:
      type: object
      description: Handle incoming payment data from Google Pay SDK client.
      properties:
        code:
          type: string
          description: Code to identify the service in the API/URLs/etc
        amount:
          type: string
        session_id:
          type: string
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
        google_pay_payload:
          allOf:
          - $ref: '#/components/schemas/GooglePayPaymentData'
          description: GooglePay payment data received from GooglePay.
      required:
      - amount
      - code
      - google_pay_payload
      - session_id
    Payment:
      type: object
      description: |-
        This Payment models its used solely for PaymentTransaction detail page.
        Cannot be instantiated without an instance of PaymentTransaction.
      properties:
        payment_url:
          type: string
          format: url
          readOnly: true
        id:
          type: integer
          readOnly: true
          title: Internal ID
          description: This field is an automatically generated internal identifier
            for each payment transaction. This unique and sequential ID makes it easy
            to reference and manage individual transactions within the system.
        state:
          enum:
          - created
          - pending
          - attempted
          - authorized
          - paid
          - failed
          - canceled
          - expired
          - invalided
          - refunded
          - cod
          - refund_queued
          - refund_rejected
          - voided
          type: string
          readOnly: true
          description: |-
            The current state of the payment transaction, it helps to understand the progress of the payment.

            * `created` - Created
            * `pending` - Pending
            * `attempted` - Attempted
            * `authorized` - Authorized
            * `paid` - Paid
            * `failed` - Failed
            * `canceled` - Canceled
            * `expired` - Expired
            * `invalided` - Invalided
            * `refunded` - Refunded
            * `cod` - Cash on Delivery
            * `refund_queued` - Refund Queued
            * `refund_rejected` - Refund Rejected
            * `voided` - Voided
        type:
          enum:
          - e_commerce
          - payment_request
          - bulk
          - catalogue
          - customer_payment
          - shopify
          - event
          - food_ordering
          - iata
          - real_estate
          type: string
          readOnly: true
          description: |-
            The type of the payment transaction. This field represents the purpose of the payment and can be one of several pre-defined choices.

            * `e_commerce` - E-Commerce
            * `payment_request` - Payment request
            * `bulk` - Bulk Payment Request
            * `catalogue` - Catalogue purchase
            * `customer_payment` - Customer payment
            * `shopify` - Shopify
            * `event` - Event management and booking
            * `food_ordering` - Food ordering
            * `iata` - IATA
            * `real_estate` - Real Estate
        amount:
          type: string
          description: Represents the total amount of the payment transaction, which
            includes the cost of the purchased items or services but excludes any
            additional fees or charges
          maxLength: 24
        currency_code:
          enum:
          - AED
          - AFN
          - ALL
          - AMD
          - ANG
          - AOA
          - ARS
          - AUD
          - AWG
          - AZN
          - BAM
          - BBD
          - BDT
          - BGN
          - BHD
          - BIF
          - BMD
          - BND
          - BOB
          - BOV
          - BRL
          - BSD
          - BTN
          - BWP
          - BYN
          - BZD
          - CAD
          - CDF
          - CHE
          - CHF
          - CHW
          - CLF
          - CLP
          - CNY
          - COP
          - COU
          - CRC
          - CUC
          - CUP
          - CVE
          - CZK
          - DJF
          - DKK
          - DOP
          - DZD
          - EGP
          - ERN
          - ETB
          - EUR
          - FJD
          - FKP
          - GBP
          - GEL
          - GHS
          - GIP
          - GMD
          - GNF
          - GTQ
          - GYD
          - HKD
          - HNL
          - HRK
          - HTG
          - HUF
          - IDR
          - ILS
          - INR
          - IQD
          - IRR
          - ISK
          - JMD
          - JOD
          - JPY
          - KES
          - KGS
          - KHR
          - KMF
          - KPW
          - KRW
          - KWD
          - KYD
          - KZT
          - LAK
          - LBP
          - LKR
          - LRD
          - LSL
          - LYD
          - MAD
          - MDL
          - MGA
          - MKD
          - MMK
          - MNT
          - MOP
          - MRU
          - MUR
          - MVR
          - MWK
          - MXN
          - MXV
          - MYR
          - MZN
          - NAD
          - NGN
          - NIO
          - NOK
          - NPR
          - NZD
          - OMR
          - PAB
          - PEN
          - PGK
          - PHP
          - PKR
          - PLN
          - PYG
          - QAR
          - RON
          - RSD
          - RUB
          - RWF
          - SAR
          - SBD
          - SCR
          - SDG
          - SEK
          - SGD
          - SHP
          - SLE
          - SLL
          - SOS
          - SRD
          - SSP
          - STN
          - SVC
          - SYP
          - SZL
          - THB
          - TJS
          - TMT
          - TND
          - TOP
          - TRY
          - TTD
          - TWD
          - TZS
          - UAH
          - UGX
          - USD
          - USN
          - UYI
          - UYU
          - UYW
          - UZS
          - VED
          - VES
          - VND
          - VUV
          - WST
          - XAF
          - XAG
          - XAU
          - XBA
          - XBB
          - XBC
          - XBD
          - XCD
          - XDR
          - XOF
          - XPD
          - XPF
          - XPT
          - XSU
          - XTS
          - XUA
          - XXX
          - YER
          - ZAR
          - ZMW
          - ZWL
          type: string
          description: |-
            The specified currency represents the denomination of the transaction.Nevertheless, it doesn't necessarily mandate payment in this exact currency.Due to potential currency conversions or exchanges, the final charge may be in a different currency.

            * `AED` - AED
            * `AFN` - AFN
            * `ALL` - ALL
            * `AMD` - AMD
            * `ANG` - ANG
            * `AOA` - AOA
            * `ARS` - ARS
            * `AUD` - AUD
            * `AWG` - AWG
            * `AZN` - AZN
            * `BAM` - BAM
            * `BBD` - BBD
            * `BDT` - BDT
            * `BGN` - BGN
            * `BHD` - BHD
            * `BIF` - BIF
            * `BMD` - BMD
            * `BND` - BND
            * `BOB` - BOB
            * `BOV` - BOV
            * `BRL` - BRL
            * `BSD` - BSD
            * `BTN` - BTN
            * `BWP` - BWP
            * `BYN` - BYN
            * `BZD` - BZD
            * `CAD` - CAD
            * `CDF` - CDF
            * `CHE` - CHE
            * `CHF` - CHF
            * `CHW` - CHW
            * `CLF` - CLF
            * `CLP` - CLP
            * `CNY` - CNY
            * `COP` - COP
            * `COU` - COU
            * `CRC` - CRC
            * `CUC` - CUC
            * `CUP` - CUP
            * `CVE` - CVE
            * `CZK` - CZK
            * `DJF` - DJF
            * `DKK` - DKK
            * `DOP` - DOP
            * `DZD` - DZD
            * `EGP` - EGP
            * `ERN` - ERN
            * `ETB` - ETB
            * `EUR` - EUR
            * `FJD` - FJD
            * `FKP` - FKP
            * `GBP` - GBP
            * `GEL` - GEL
            * `GHS` - GHS
            * `GIP` - GIP
            * `GMD` - GMD
            * `GNF` - GNF
            * `GTQ` - GTQ
            * `GYD` - GYD
            * `HKD` - HKD
            * `HNL` - HNL
            * `HRK` - HRK
            * `HTG` - HTG
            * `HUF` - HUF
            * `IDR` - IDR
            * `ILS` - ILS
            * `INR` - INR
            * `IQD` - IQD
            * `IRR` - IRR
            * `ISK` - ISK
            * `JMD` - JMD
            * `JOD` - JOD
            * `JPY` - JPY
            * `KES` - KES
            * `KGS` - KGS
            * `KHR` - KHR
            * `KMF` - KMF
            * `KPW` - KPW
            * `KRW` - KRW
            * `KWD` - KWD
            * `KYD` - KYD
            * `KZT` - KZT
            * `LAK` - LAK
            * `LBP` - LBP
            * `LKR` - LKR
            * `LRD` - LRD
            * `LSL` - LSL
            * `LYD` - LYD
            * `MAD` - MAD
            * `MDL` - MDL
            * `MGA` - MGA
            * `MKD` - MKD
            * `MMK` - MMK
            * `MNT` - MNT
            * `MOP` - MOP
            * `MRU` - MRU
            * `MUR` - MUR
            * `MVR` - MVR
            * `MWK` - MWK
            * `MXN` - MXN
            * `MXV` - MXV
            * `MYR` - MYR
            * `MZN` - MZN
            * `NAD` - NAD
            * `NGN` - NGN
            * `NIO` - NIO
            * `NOK` - NOK
            * `NPR` - NPR
            * `NZD` - NZD
            * `OMR` - OMR
            * `PAB` - PAB
            * `PEN` - PEN
            * `PGK` - PGK
            * `PHP` - PHP
            * `PKR` - PKR
            * `PLN` - PLN
            * `PYG` - PYG
            * `QAR` - QAR
            * `RON` - RON
            * `RSD` - RSD
            * `RUB` - RUB
            * `RWF` - RWF
            * `SAR` - SAR
            * `SBD` - SBD
            * `SCR` - SCR
            * `SDG` - SDG
            * `SEK` - SEK
            * `SGD` - SGD
            * `SHP` - SHP
            * `SLE` - SLE
            * `SLL` - SLL
            * `SOS` - SOS
            * `SRD` - SRD
            * `SSP` - SSP
            * `STN` - STN
            * `SVC` - SVC
            * `SYP` - SYP
            * `SZL` - SZL
            * `THB` - THB
            * `TJS` - TJS
            * `TMT` - TMT
            * `TND` - TND
            * `TOP` - TOP
            * `TRY` - TRY
            * `TTD` - TTD
            * `TWD` - TWD
            * `TZS` - TZS
            * `UAH` - UAH
            * `UGX` - UGX
            * `USD` - USD
            * `USN` - USN
            * `UYI` - UYI
            * `UYU` - UYU
            * `UYW` - UYW
            * `UZS` - UZS
            * `VED` - VED
            * `VES` - VES
            * `VND` - VND
            * `VUV` - VUV
            * `WST` - WST
            * `XAF` - XAF
            * `XAG` - XAG
            * `XAU` - XAU
            * `XBA` - XBA
            * `XBB` - XBB
            * `XBC` - XBC
            * `XBD` - XBD
            * `XCD` - XCD
            * `XDR` - XDR
            * `XOF` - XOF
            * `XPD` - XPD
            * `XPF` - XPF
            * `XPT` - XPT
            * `XSU` - XSU
            * `XTS` - XTS
            * `XUA` - XUA
            * `XXX` - XXX
            * `YER` - YER
            * `ZAR` - ZAR
            * `ZMW` - ZMW
            * `ZWL` - ZWL
        non_default_customer_email:
          type: string
          format: email
          readOnly: true
          title: Customer email
          description: The email address of the customer.
        non_master_unit_config:
          type: string
          readOnly: true
          title: Unit
        extra:
          $ref: '#/components/schemas/ExtraInner'
        order_no:
          type: string
          nullable: true
          description: The unique identifier assigned to this payment transaction.
            It is used for tracking purposes and is set by the merchant or the system.
          maxLength: 128
        customer_first_name:
          type: string
          description: The first name of the recipient of the payment. This field
            is used for various communications such as the invoice, receipt, email,
            SMS, or displayed on the payment page. It may also be sent to the payment
            gateway if necessary.
          maxLength: 64
        customer_last_name:
          type: string
          description: The last name of the recipient of the payment. This field is
            used for various communications such as the invoice, receipt, email, SMS,
            or displayed on the payment page. It may also be sent to the payment gateway
            if necessary.
          maxLength: 64
        customer_phone:
          type: string
          description: Customer phone number associated with the payment. This might
            be sent to the payment gateway and depending on the gateway, it may trigger
            a click to pay process on the payment page. The phone number will also
            be included in the invoice, receipt, email, and displayed on the payment
            page.
          maxLength: 32
        customer_billing_address:
          allOf:
          - $ref: '#/components/schemas/CustomerBillingAddress'
          readOnly: true
          description: Represents the billing address of the customer, which will
            be used for the payment transaction. This information might be used by
            the payment gateway to verify the identity of the customer. It can be
            displayed on the payment page, invoice, receipt, email, etc.
        email_recipients:
          type: string
          description: A comma-separated list of email addresses for internal recipients
            who will receive customer emails. These recipients will be included in
            email notifications sent to the customer regarding their payment.
        vendor_name:
          type: string
          description: The name of the vendor or merchant associated with this payment.
            This field may be used for accounting and reporting purposes.
          maxLength: 64
        due_date:
          type: string
          format: date
          nullable: true
        product_type:
          type: string
          description: The type of product or service being purchased. This field
            may be used for tracking and reporting purposes.
          maxLength: 128
        attachment:
          type: string
          format: uri
          nullable: true
          description: An optional attachment that will be included in email notifications
            sent to the customer regarding their payment, and also be available for
            download on the checkout page. This field may be used to provide the customer
            with additional information or documentation related to their purchase.
        attachment_short_url:
          type: string
          format: uri
          description: A short URL that links to the attachment associated with this
            payment. This URL may be included in email/sms notifications sent to the
            customer regarding their payment or displayed on the checkout page to
            allow the customer to easily access the attachment.
          maxLength: 200
        qr_code_url:
          type: string
          format: uri
          readOnly: true
          description: A QR code that, when scanned, redirects to the checkout page
            for this payment. This QR code may be displayed on invoices, receipts,
            or other documents to allow customers to easily access the checkout page
            and make a payment. This parameter is only present when `generate_qr_code`
            is set to true.
        session_id:
          type: string
          readOnly: true
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
          maxLength: 128
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        state_changed_at:
          type: string
          format: date-time
          readOnly: true
          description: A timestamp indicating when the state of this payment transaction
            was last updated. This field may be used to track changes in the state
            of the payment transaction over time.
        invalidation_reason:
          type: string
          readOnly: true
          description: If the payment transaction was invalidated, this field contains
            the reason for it.
        initiator:
          allOf:
          - $ref: '#/components/schemas/Initiator'
          readOnly: true
        shortify_checkout_url:
          type: boolean
          default: false
          description: If enabled, the checkout URL will be shortened using the configured
            URL shortener.
        short_url:
          type: string
          format: uri
          readOnly: true
          description: A short URL link that, when opened, redirects to the checkout
            page for this payment. This URL may be shared with the customer to allow
            them to easily access and complete the payment.
          maxLength: 200
        unit_config:
          allOf:
          - $ref: '#/components/schemas/Unit'
          title: Unit
        notifications:
          type: object
          additionalProperties: {}
          title: Notification settings
          description: A JSON field that contains the notification settings for this
            payment transaction, including SMS and email notifications, as well as
            the events for which they will be sent (e.g., 'created', 'paid', 'refund',
            'canceled', etc.). This field may be used to configure and customize the
            notifications sent to customers and internal recipients throughout the
            payment process.
        gateway_code:
          type: string
          readOnly: true
          description: Represents the payment gateway code that was used to perform
            the payment or authorization.
          maxLength: 16
        pg_codes:
          type: object
          additionalProperties: {}
          title: Payment Gateway Codes
          description: The list of payment gateway codes from which a customer can
            select to perform the payment or authorization.
        payment_service:
          type: string
          readOnly: true
          description: The payment service the customer has used to make the payment,
            such as Apple Pay, Samsung Pay, Google Pay, or another payment service.
            This field may be used to track the payment method used by the customer
            and to help with accounting and reporting.
          maxLength: 32
        service_code:
          type: string
          readOnly: true
          title: Payment service code
          description: The service code is used to identify the payment service that
            was used to perform the payment or authorization.
          maxLength: 16
        operation:
          enum:
          - purchase
          - authorize
          type: string
          readOnly: true
          description: |-
            Specifies the type of operation to be performed by the payment gateway. If set to `purchase`, the payment source will be directly charged. If set to `authorize`, the payment source will only be authorized and the actual charge will be made at a later time.

            * `purchase` - Purchase
            * `authorize` - Authorize
        is_sandbox:
          type: boolean
          readOnly: true
          title: Is Sandbox?
          description: Indicates whether the operation was performed in a test environment
            or not.
        is_amount_editable:
          type: boolean
          readOnly: true
          title: Editable amount
          description: This field specifies whether the customer can modify the payment
            amount and choose the amount he wishes to pay.
        settled_amount:
          type: number
          format: double
          description: The paid or authorized amount in the original currency, excluding
            any fees or charges.
          readOnly: true
        paid_amount:
          oneOf:
          - type: number
            format: double
          - type: string
          description: Total paid amount in the original currency, with fee. This
            calculation might be the result of currency exchange if it was paid in
            different currency.
          readOnly: true
        fee:
          type: string
          description: Fee represents the amount paid by the customer in the currency
            they used for the payment. This currency may differ from the currency
            of the transaction.
          readOnly: true
        refunded_amount:
          type: number
          format: double
          description: The total amount which has been refunded back to the customer
            in the original currency, including any fees or charges that were applied
            to the transaction.
          readOnly: true
        voided_amount:
          type: number
          format: double
          description: The total amount which has been voided back to the customer
            in the original currency, including any fees or charges that were applied
            to the transaction.
          readOnly: true
        delivery_fee:
          type: string
          readOnly: true
          description: This field represents the delivery fee for the order. It is
            applicable only for catalogue transactions.
          maxLength: 120
        webhook_url:
          type: string
          format: uri
          description: 'URL where the payment result will be sent via a POST request
            after the customer has completed the payment session. The payment result
            will be included in the request body. '
        redirect_url:
          type: string
          format: uri
          description: The URL where the customer will be redirected after the payment
            stage only if the webhook URL returns a success status. `order_no`, `reference_number`
            and `session_id` will be appended to the redirect URL as query parameters.
          maxLength: 200
        capture_delivery_location:
          type: boolean
          title: Capture delivery coordinates
          description: 'By enabling this, you will ask for user''s delivery location
            on a map. '
        capture_delivery_address:
          type: boolean
          description: By enabling this, you will ask for user's address. If enabled,
            capture delivery coordinates should also be active.
        agreement:
          type: object
          additionalProperties: {}
          description: "An established contractual arrangement with the payer, which\
            \ authorizes you to securely store and subsequently utilize their payment\
            \ information for specific purposes. This could encompass arrangements\
            \ like recurring payments for services such as mobile subscriptions, installment-based\
            \ payments for purchases, arrangements for ad-hoc charges like account\
            \ top-ups, or for standard industry practices like penalty charges for\
            \ missed appointments. \n\nNote: If your intention is solely to store\
            \ payment details for transactions initiated by the payer in the future,\
            \ then this parameter group should not be used."
        customer_email:
          type: string
          description: The email address of the customer that is used to send payment
            notifications and receipts, and can be used for fraud prevention. This
            field is mandatory and is always sent to the payment gateway. It may also
            be included in the invoice, receipt, email, and displayed on the payment
            page.
          maxLength: 128
        customer_additional_phone:
          type: string
          description: The customer's additional phone number, if any. This field
            can be updated by the customer on the payment page or in the Checkout
            SDK.
          maxLength: 32
        customer_shipping_address:
          type: object
          additionalProperties: {}
          title: Shipping address
          description: The shipping address of the customer where the product or service
            will be delivered to. This information might be used for fraud prevention
            and it can be displayed on the invoice, receipt, email and other communication
            sent to the customer.
        card_acceptance_criteria:
          type: object
          additionalProperties: {}
          description: |-
            This field allows you to define specific rules and conditions that a card must meet to be eligible for payment. These stipulations apply regardless of whether a customer chooses to pay using a saved card or opts to add a new card for the transaction. By leveraging the `card_acceptance_criteria`, you gain the power to fine-tune your payment processing strategy, tailoring acceptance rules to align with your business needs, security standards, and risk management policies.

            **Example**: If you run an exclusive service that caters predominantly to premium customers, you might set criteria that only allow transactions from high-tier credit cards like VISA Platinum. This ensures that payments align with the exclusivity and branding of your services. Remember to configure these criteria thoughtfully. Striking the right balance between security, risk mitigation, and user experience is paramount.

            **Note**: The `card_acceptance_criteria` field is applicable only for direct payments and not for hosted session payments.
        seen_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: A timestamp indicating when the payment link associated with
            this payment was seen or opened by the customer or any other guest user.
            This field may be used to track when payment links have been accessed.
        email_seen_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: A timestamp indicating when the email notification associated
            with this payment was seen or opened by the customer or any other guest
            user. This field may be used to track when email notifications have been
            viewed.
        due_datetime:
          type: string
          format: date-time
          nullable: true
          title: Due date and time
          description: The date and time by which the payment is due. This field may
            be used to help remind the customer to complete the payment before the
            due date.
        notification_set:
          allOf:
          - $ref: '#/components/schemas/NotificationSet'
          readOnly: true
        expiration_time:
          type: string
          nullable: true
          description: If defined, any payment transactions created more than the
            specified period of time ago will be invalidated or expired if the customer
            attempts to complete them. By default, this expiration period is set to
            24 hours from the time of transaction creation. This feature helps ensure
            that payment transactions are processed promptly.
        shortify_attachment_url:
          type: boolean
          default: false
          description: If enabled, the attachment URL will be shortened using the
            configured URL shortener.
        receipt_short_url:
          type: string
          format: uri
          readOnly: true
          description: A short URL that links to the receipt associated with this
            payment. This URL may be included in email/sms notifications sent to the
            customer regarding their payment or displayed on the checkout page to
            allow the customer to easily access their receipt.
          maxLength: 5000
        invoice_pdf_url:
          type: string
          format: uri
          readOnly: true
        data:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Used to store useful information for internal purposes
        bulk:
          allOf:
          - $ref: '#/components/schemas/Bulk'
          readOnly: true
        transaction_log_id:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
          readOnly: true
          nullable: true
          description: Identifies the transaction log associated with the payment
            transaction. A transaction log is created for each record that is dispatched
            during a bulk dispatch process.
        txns:
          type: array
          items:
            $ref: '#/components/schemas/ChildrenPayment'
          readOnly: true
          title: Child Transactions
        attempts:
          type: array
          items:
            $ref: '#/components/schemas/Attempt'
          readOnly: true
        notification_triggers:
          type: array
          items:
            $ref: '#/components/schemas/MailLog'
          readOnly: true
          title: Mail logs
        log_entries:
          allOf:
          - $ref: '#/components/schemas/LogEntry'
          readOnly: true
      required:
      - amount
      - attempts
      - bulk
      - created
      - currency_code
      - customer_billing_address
      - data
      - delivery_fee
      - email_seen_at
      - fee
      - gateway_code
      - id
      - initiator
      - invalidation_reason
      - invoice_pdf_url
      - is_amount_editable
      - is_sandbox
      - log_entries
      - modified
      - non_default_customer_email
      - non_master_unit_config
      - notification_set
      - notification_triggers
      - operation
      - paid_amount
      - payment_service
      - payment_url
      - qr_code_url
      - receipt_short_url
      - refunded_amount
      - seen_at
      - service_code
      - session_id
      - settled_amount
      - short_url
      - state
      - state_changed_at
      - transaction_log_id
      - txns
      - type
      - unit_config
      - voided_amount
    PaymentAuthorize:
      type: object
      properties:
        message:
          type: string
          default: The transaction's One-Time Password (OTP) has been successfully
            sent.
    PaymentGatewayInfo:
      type: object
      description: Information about the payment gateway, accompanied by the response
        received from the payment gateway.
      properties:
        pg_code:
          type: string
          description: The unique identifier, or `pg_code`, for the payment gateway
            that was used to process the payment. This value corresponds to the specific
            payment method utilized by the customer, such as `credit-card`.
        pg_name:
          type: string
          description: The name of the payment gateway, represented in all lowercase
            letters, that was used to perform the payment. This could be one of several
            values, such as `kpay` (for KNET), `mpgs`, or `cybersource`. These identifiers
            provide a human-readable way to understand the payment mechanism that
            was utilized.
        pg_response:
          type: object
          additionalProperties: {}
          description: The raw response data that was received directly from the payment
            gateway after the transaction attempt. This typically includes transaction
            status, transaction identifier, and potentially error messages or additional
            data provided by the gateway.
      required:
      - pg_code
      - pg_name
      - pg_response
    PaymentMethod:
      type: object
      properties:
        displayName:
          type: string
        network:
          type: string
        type:
          type: string
      required:
      - displayName
      - network
      - type
    PaymentMethodData:
      type: object
      description: https://developers.google.com/pay/api/web/reference/response-objects#PaymentMethodData
      properties:
        type:
          type: string
          description: The type of payment method data.
        description:
          type: string
          description: The description of the payment method.
        info:
          type: object
          additionalProperties: {}
          description: The payment method info.
        tokenizationData:
          type: object
          additionalProperties: {}
          description: The tokenization data.
      required:
      - description
      - info
      - tokenizationData
      - type
    PaymentMethodsForRedirect:
      type: object
      properties:
        code:
          type: string
          description: The slug code of the payment method.
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          description: The name of the payment method.
        pg:
          type: string
          description: The payment gateway of the payment.
        type:
          enum:
          - e_commerce
          - payment_request
          type: string
          description: |-
            The type of the payment transaction.

            * `e_commerce` - Ecommerce
            * `payment_request` - Payment Request
        amount:
          type: string
          description: The total amount to be charged, including fees.
        currency_code:
          type: string
          description: The currency code for the payment method represented as an
            ISO 4217 code.
          maxLength: 3
        fee:
          type: string
          description: The fee charged by the payment gateway.
        fee_description:
          type: string
          description: This field provides the label for any additional transaction
            fee. In the SDK, this label will be displayed prominently during the checkout
            process to inform the payer about the nature of the fee. Ensure to incorporate
            this field in a clear and visible manner within the checkout UI to maintain
            transparency with the end-users.
        icon:
          type: string
          format: uri
          description: The URL of the icon for the payment method.
        flow:
          type: string
          default: redirect
          description: The flow type of the payment method.
        redirect_url:
          type: string
          format: uri
          nullable: true
          description: The URL where the customer should be redirected to perform
            the payment.
      required:
      - amount
      - code
      - currency_code
      - fee
      - fee_description
      - icon
      - name
      - pg
      - type
    PaymentMethodsRequest:
      type: object
      properties:
        plugin:
          type: string
          description: Payment methods will be curated based on their compatibility
            with the specified plugin.
          maxLength: 50
        currencies:
          type: array
          items: {}
          description: 'Specify the three-letter ISO 4217 codes representing the desired
            currencies. Examples include USD for United States Dollar, EUR for Euro,
            and GBP for British Pound Sterling. Example: [''KWD'',''USD'']'
        customer_id:
          type: string
          description: If provided, `customer_payment_methods` will be filtered to
            show only those payment methods that have been successfully used with
            a paid payment attempts by this customer in the past.
          maxLength: 64
        operation:
          enum:
          - purchase
          - authorize
          type: string
          description: |-
            When specified, the available payment methods will be refined based on their compatibility with the indicated operation.

            * `purchase` - purchase
            * `authorize` - authorize
        tokenizable:
          type: boolean
          description: If defined, payment methods will be filtered based on supporting
            tokenization and auto-debit action.
        pg_names:
          type: array
          items: {}
          description: |-
            When provided, the payment methods will be narrowed down to those that support the specified payment gateway name. Example: ['kpay','mpgs']

            Available Values:<br><li>`cybersource` - CyberSource</li><br><li>`checkoutcom` - checkout.com</li><br><li>`burgan` - Burgan</li><br><li>`paypal` - PayPal</li><br><li>`mpgs` - MPGS</li><br><li>`kpay` - KNET</li><br><li>`omannet` - OmanNet</li><br><li>`benefit` - Benefit</li><br><li>`benefit_pay` - BenefitPay</li><br><li>`blank` - Blank</li><br><li>`cbk` - CBK</li><br><li>`fss` - FSS</li><br><li>`myfatoorah` - MyFatoorah</li><br><li>`ngenius` - N-Genius</li><br><li>`ccavenues` - Ccavenues</li><br><li>`payu_india` - PayU India</li><br><li>`cod` - Cash</li><br><li>`amazon_pay` - Amazon Pay</li><br><li>`ottu_pg` - Ottu PG</li><br><li>`bookeey` - Bookeey</li><br><li>`upg` - UPG</li><br><li>`bambora` - Bambora</li><br><li>`hyperpay` - HyperPay</li><br><li>`qpay` - Qpay</li><br><li>`smart_pay` - SmartPay</li><br><li>`nbo` - NBO</li><br><li>`tabby` - Tabby</li><br><li>`tamara` - Tamara</li><br><li>`hesabe` - Hesabe</li><br><li>`rajhi` - Alrajhi Bank</li><br><li>`stc_pay` - STC Pay</li><br><li>`beyon_money` - BeyonMoney</li>
        type:
          enum:
          - sandbox
          - production
          type: string
          description: |-
            When specified, the available payment methods will be refined based on their type determining if type is sandbox or production.

            * `sandbox` - sandbox
            * `production` - production
      required:
      - plugin
    PaymentMethodsResponse:
      type: object
      properties:
        customer_payment_methods:
          type: array
          items: {}
          description: Denotes a collection of payment gateways which used by user
            in successful payment attempts.
        payment_methods:
          type: array
          items:
            $ref: '#/components/schemas/PGPaymentMethods'
          description: Provides a comprehensive overview of the available payment
            gateways, delineated as distinct payment methods.
    PaymentOperationErrors:
      oneOf:
      - $ref: '#/components/schemas/FieldErrors'
      - $ref: '#/components/schemas/OperationFailure'
    PaymentOperationResponses:
      oneOf:
      - $ref: '#/components/schemas/InternalOperation'
      - $ref: '#/components/schemas/ExternalOperation'
    PaymentResponse:
      type: object
      properties:
        status:
          enum:
          - success
          - canceled
          type: string
          description: |-
            The status of the payment operation.

            * `success` - Success
            * `canceled` - Canceled
        session_id:
          type: string
          description: The unique session ID for the payment operation.
        message:
          type: string
          description: The message associated with the payment operation.
        order_no:
          type: string
          description: The order number associated with the payment operation.
        operation:
          enum:
          - purchase
          - authorize
          type: string
          description: |-
            The operation associated with the payment.

            * `purchase` - Purchase
            * `authorize` - Authorize
        reference_number:
          type: string
          description: The reference number associated with the payment.
        redirect_url:
          type: string
          format: uri
          description: The redirect URL is the web address where the customer should
            be sent after completing the payment stage.
      required:
      - message
      - operation
      - order_no
      - redirect_url
      - reference_number
      - session_id
      - status
    SDKCancelCallback:
      type: object
      properties:
        message:
          type: string
          readOnly: true
          description: A concise description detailing the outcome of the operation.
            Suitable for presenting to the end-user if needed.
        form_of_payment:
          enum:
          - apple_pay
          - google_pay
          - token_pay
          - stc_pay
          - redirect
          type: string
          readOnly: true
          description: |-
            Indicates the form of payment used to process the transaction. This can be one of several options, including `apple_pay`, `google_pay`, `token_pay`, `stc_pay`, or `redirect`. It's important to note that the `redirect` option is only present in the `errorCallback`. In other scenarios, especially with `cancelCallback` and `successCallback`, it's absent. This is because, in the redirect flow, the customer is redirected to a different page where actions like payment cancellation or confirmation occur, not on the page where the SDK is displayed.

            * `apple_pay` - Apple Pay
            * `google_pay` - Google Pay
            * `token_pay` - Token Pay
            * `stc_pay` - STC Pay
            * `redirect` - Redirect
        challenge_occurred:
          type: boolean
          default: false
          description: This flag indicates if an additional verification, such as
            3DS, OTP, PIN, etc., was initiated during the payment process. Use this
            flag in cancelCallback and errorCallback to control the presentation of
            error messages, especially for on-site payments undergoing a challenge
            flow. For example, after a failed 3DS verification, it's useful to show
            a custom popup informing the user of the payment failure. However, it's
            crucial to note that not all on-site failed payments need custom error
            messaging. In cases like GooglePay or ApplePay, error messages are inherently
            handled by the Payment Sheet, which remains open for the user to retry,
            making this distinction vital.
        session_id:
          type: string
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
        status:
          type: string
          readOnly: true
          default: canceled
          description: The payment is canceled either by customer or failed due to
            various reasons. `cancelCallback` must be triggered.
        order_no:
          type: string
          description: The unique identifier assigned to this payment transaction.
            It is used for tracking purposes and is set by the merchant or the system.
        reference_number:
          type: string
          description: This is a unique value associated with each payment attempt
            made by a customer. It serves as the unique identifier for the payment
            when sent to the Payment Gateway (PG). It can be used to identify a specific
            payment attempt within one session, allowing for multiple reference numbers
            per session_id.
        payment_gateway_info:
          $ref: '#/components/schemas/PaymentGatewayInfo'
      required:
      - form_of_payment
      - message
      - order_no
      - payment_gateway_info
      - reference_number
      - session_id
      - status
    SDKErrorCallback:
      type: object
      properties:
        message:
          type: string
          readOnly: true
          description: A concise description detailing the outcome of the operation.
            Suitable for presenting to the end-user if needed.
        form_of_payment:
          enum:
          - apple_pay
          - google_pay
          - token_pay
          - stc_pay
          - redirect
          type: string
          readOnly: true
          description: |-
            Indicates the form of payment used to process the transaction. This can be one of several options, including `apple_pay`, `google_pay`, `token_pay`, `stc_pay`, or `redirect`. It's important to note that the `redirect` option is only present in the `errorCallback`. In other scenarios, especially with `cancelCallback` and `successCallback`, it's absent. This is because, in the redirect flow, the customer is redirected to a different page where actions like payment cancellation or confirmation occur, not on the page where the SDK is displayed.

            * `apple_pay` - Apple Pay
            * `google_pay` - Google Pay
            * `token_pay` - Token Pay
            * `stc_pay` - STC Pay
            * `redirect` - Redirect
        challenge_occurred:
          type: boolean
          default: false
          description: This flag indicates if an additional verification, such as
            3DS, OTP, PIN, etc., was initiated during the payment process. Use this
            flag in cancelCallback and errorCallback to control the presentation of
            error messages, especially for on-site payments undergoing a challenge
            flow. For example, after a failed 3DS verification, it's useful to show
            a custom popup informing the user of the payment failure. However, it's
            crucial to note that not all on-site failed payments need custom error
            messaging. In cases like GooglePay or ApplePay, error messages are inherently
            handled by the Payment Sheet, which remains open for the user to retry,
            making this distinction vital.
        session_id:
          type: string
        order_no:
          type: string
          description: The unique identifier assigned to this payment transaction.
            It is used for tracking purposes and is set by the merchant or the system.
        reference_number:
          type: string
          description: The reference number.
      required:
      - form_of_payment
      - message
    SDKPaymentMethods:
      type: object
      properties:
        code:
          type: string
          description: The slug code of the payment method.
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          description: The name of the payment method.
        pg:
          type: string
          description: The payment gateway of the payment.
        type:
          enum:
          - e_commerce
          - payment_request
          type: string
          description: |-
            The type of the payment transaction.

            * `e_commerce` - Ecommerce
            * `payment_request` - Payment Request
        amount:
          type: string
          description: The total amount to be charged, including fees.
        currency_code:
          type: string
          description: The currency code for the payment method represented as an
            ISO 4217 code.
          maxLength: 3
        fee:
          type: string
          description: The fee charged by the payment gateway.
        fee_description:
          type: string
          description: This field provides the label for any additional transaction
            fee. In the SDK, this label will be displayed prominently during the checkout
            process to inform the payer about the nature of the fee. Ensure to incorporate
            this field in a clear and visible manner within the checkout UI to maintain
            transparency with the end-users.
        icon:
          type: string
          format: uri
          description: The URL of the icon for the payment method.
        flow:
          enum:
          - redirect
          - ottu_pg
          - stc_pay
          type: string
          description: |-
            The flow type of the payment method.

            1. `redirect`:
            - **Web SDK**: After submitting the payload as per `Submit redirect payment method API`, you will receive a `redirect_url`. Redirect the payer to this URL using: `window.location.href = redirect_url`.
            - **Mobile SDK**: After submitting the payload, open the received `redirect_url` in a webview.

            2. `ottu_pg`:
            - **Web SDK**: Directly redirect the payer to the provided `redirect_url` using: `window.location.href = redirect_url`.
            - **Mobile SDK**: Open the `redirect_url` directly in a webview. Ensure you append the query string `channel=mobile_sdk` to the end of the URL, taking care with the concatenation if the `redirect_url` already contains other query parameters.

            Common Webview Closing Method (for both `redirect` and `ottu_pg` in Mobile SDK):
            Detect the URL redirection by listening to redirects within the webview. When a redirect occurs to the URL `{merchant_id}/b/gw/mobile-sdk-redirect`, close the webview. This indicates that the payment process has completed. After closing the webview, reload the SDK and call the `Retrieve init data API` to display the payment result to the payer. Note: `merchant_id` is the same ID used to build the `Fetch retrieve data API` and is the parameter added in the CheckoutSDK.init method.

            3. `stc_pay`: Use the `submit_url` to retrieve the OTP needed to complete the payment. Check next `Submit STC Pay payment method`.

            * `redirect` - Redirect
            * `ottu_pg` - Ottu PG
            * `stc_pay` - STC Pay
        redirect_url:
          type: string
          format: uri
          description: 'This field is used for the `ottu_pg` payment flow. When `flow`
            is `ottu_pg`, the payer will be directly redirected to this URL. This
            field is only present when `flow` is `ottu_pg`. For web integrations:
            Use `window.location.href = redirect_url` to redirect the payer to the
            specified URL. For mobile SDK integrations: Open the `redirect_url` in
            the webview. Upon redirecting to the provided URL, the webview should
            be closed and the transaction refreshed using the `Checkout SDK / Retrieve
            init data API`. Detect the URL redirection by listening to redirects in
            the webview. When a redirect occurs to a URL containing the `merchant_id`
            domain, close the webview and reload the SDK after calling the `Retrieve
            init data API`.'
        can_save_card:
          type: boolean
          description: When true, display a checkbox in the SDK for card saving with
            this payment method. When false, do not display the checkbox.
        submit_url:
          type: string
          format: uri
          description: 'When submitting information via POST, the appropriate URL
            depends on the `flow` value:`redirect`: The URL is for submitting `payment_methods[index].code`.`stc_pay`:
            The URL is for submitting STC Pay related details.This field is only present
            when `flow` is either `redirect` or `stc_pay`.'
      required:
      - amount
      - can_save_card
      - code
      - currency_code
      - fee
      - fee_description
      - flow
      - icon
      - name
      - pg
      - type
    SDKSubmitRedirectResponse:
      oneOf:
      - $ref: '#/components/schemas/CheckoutSubmitSuccessResponse'
      - $ref: '#/components/schemas/SDKErrorCallback'
    SDKSubmitTokenResponse:
      oneOf:
      - $ref: '#/components/schemas/SDKSuccessCallback'
      - $ref: '#/components/schemas/SDKCancelCallback'
      - $ref: '#/components/schemas/SDKErrorCallback'
      - $ref: '#/components/schemas/ThreeDSResponse'
    SDKSuccessCallback:
      type: object
      description: Callback payload to be forwarder directly to `successCallback`
        SDK method.
      properties:
        message:
          type: string
          readOnly: true
          description: A concise description detailing the outcome of the operation.
            Suitable for presenting to the end-user if needed.
        form_of_payment:
          enum:
          - apple_pay
          - google_pay
          - token_pay
          - stc_pay
          - redirect
          type: string
          readOnly: true
          description: |-
            Indicates the form of payment used to process the transaction. This can be one of several options, including `apple_pay`, `google_pay`, `token_pay`, `stc_pay`, or `redirect`. It's important to note that the `redirect` option is only present in the `errorCallback`. In other scenarios, especially with `cancelCallback` and `successCallback`, it's absent. This is because, in the redirect flow, the customer is redirected to a different page where actions like payment cancellation or confirmation occur, not on the page where the SDK is displayed.

            * `apple_pay` - Apple Pay
            * `google_pay` - Google Pay
            * `token_pay` - Token Pay
            * `stc_pay` - STC Pay
            * `redirect` - Redirect
        challenge_occurred:
          type: boolean
          default: false
          description: This flag indicates if an additional verification, such as
            3DS, OTP, PIN, etc., was initiated during the payment process. Use this
            flag in cancelCallback and errorCallback to control the presentation of
            error messages, especially for on-site payments undergoing a challenge
            flow. For example, after a failed 3DS verification, it's useful to show
            a custom popup informing the user of the payment failure. However, it's
            crucial to note that not all on-site failed payments need custom error
            messaging. In cases like GooglePay or ApplePay, error messages are inherently
            handled by the Payment Sheet, which remains open for the user to retry,
            making this distinction vital.
        session_id:
          type: string
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
        status:
          type: string
          readOnly: true
          default: success
          description: The payment is successful. `successCallback` must be triggered.
        order_no:
          type: string
          description: The unique identifier assigned to this payment transaction.
            It is used for tracking purposes and is set by the merchant or the system.
        reference_number:
          type: string
          description: This is a unique value associated with each payment attempt
            made by a customer. It serves as the unique identifier for the payment
            when sent to the Payment Gateway (PG). It can be used to identify a specific
            payment attempt within one session, allowing for multiple reference numbers
            per session_id.
        redirect_url:
          type: string
          format: uri
          readOnly: true
          description: The URL where the customer will be redirected after the payment
            stage only if the webhook URL returns a success status. `order_no`, `reference_number`
            and `session_id` will be appended to the redirect URL as query parameters.
        payment_gateway_info:
          $ref: '#/components/schemas/PaymentGatewayInfo'
      required:
      - form_of_payment
      - message
      - order_no
      - payment_gateway_info
      - redirect_url
      - reference_number
      - session_id
      - status
    STCAuthorizePayment:
      type: object
      description: |-
        Serializer for handling STC authorize request

        Attributes:
            pg_code (str): The gateway code associated with the payment.
            session_id (str): The session ID associated with the payment.
            customer_phone (str): The Customer Phone related to payment transaction
            which will receive the transaction authorization OTP
            save_card (boolean): Boolean decides if card will be created for next
            payment, if created then user will be able to pay with token instead of otp API
      properties:
        pg_code:
          type: string
          description: The payment gateway code, selected for payment by customer
            (for pay via PG).
        session_id:
          type: string
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
        customer_phone:
          type: string
          description: Customer phone number associated with the payment. This might
            be sent to the payment gateway and depending on the gateway, it may trigger
            a click to pay process on the payment page. The phone number will also
            be included in the invoice, receipt, email, and displayed on the payment
            page.
        save_card:
          type: boolean
          description: |-
            Boolean decides if card will be created for next
                    payment, if created then user will be able to pay with token instead of otp API
    STCPayPaymentRejectedResponse:
      oneOf:
      - $ref: '#/components/schemas/GenericError'
    STCPayRejectedResponse:
      oneOf:
      - $ref: '#/components/schemas/STCSDKSuccessCallback'
      - $ref: '#/components/schemas/STCSDKCancelCallback'
      - $ref: '#/components/schemas/STCSDKErrorCallback'
    STCSDKCancelCallback:
      type: object
      properties:
        message:
          type: string
          readOnly: true
          description: A concise description detailing the outcome of the operation.
            Suitable for presenting to the end-user if needed.
        form_of_payment:
          enum:
          - apple_pay
          - google_pay
          - token_pay
          - stc_pay
          - redirect
          type: string
          readOnly: true
          default: stc_pay
          description: |-
            Indicates the form of payment used to process the transaction. This can be one of several options, including `apple_pay`, `google_pay`, `token_pay`, `stc_pay`, or `redirect`. It's important to note that the `redirect` option is only present in the `errorCallback`. In other scenarios, especially with `cancelCallback` and `successCallback`, it's absent. This is because, in the redirect flow, the customer is redirected to a different page where actions like payment cancellation or confirmation occur, not on the page where the SDK is displayed.

            * `apple_pay` - Apple Pay
            * `google_pay` - Google Pay
            * `token_pay` - Token Pay
            * `stc_pay` - STC Pay
            * `redirect` - Redirect
        challenge_occurred:
          type: boolean
          default: false
          description: This flag indicates if an additional verification, such as
            3DS, OTP, PIN, etc., was initiated during the payment process. Use this
            flag in cancelCallback and errorCallback to control the presentation of
            error messages, especially for on-site payments undergoing a challenge
            flow. For example, after a failed 3DS verification, it's useful to show
            a custom popup informing the user of the payment failure. However, it's
            crucial to note that not all on-site failed payments need custom error
            messaging. In cases like GooglePay or ApplePay, error messages are inherently
            handled by the Payment Sheet, which remains open for the user to retry,
            making this distinction vital.
        session_id:
          type: string
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
        status:
          type: string
          readOnly: true
          default: canceled
          description: The payment is canceled either by customer or failed due to
            various reasons. `cancelCallback` must be triggered.
        order_no:
          type: string
          description: The unique identifier assigned to this payment transaction.
            It is used for tracking purposes and is set by the merchant or the system.
        reference_number:
          type: string
          description: This is a unique value associated with each payment attempt
            made by a customer. It serves as the unique identifier for the payment
            when sent to the Payment Gateway (PG). It can be used to identify a specific
            payment attempt within one session, allowing for multiple reference numbers
            per session_id.
        payment_gateway_info:
          $ref: '#/components/schemas/PaymentGatewayInfo'
      required:
      - form_of_payment
      - message
      - order_no
      - payment_gateway_info
      - reference_number
      - session_id
      - status
    STCSDKErrorCallback:
      type: object
      properties:
        message:
          type: string
          readOnly: true
          description: A concise description detailing the outcome of the operation.
            Suitable for presenting to the end-user if needed.
        form_of_payment:
          enum:
          - apple_pay
          - google_pay
          - token_pay
          - stc_pay
          - redirect
          type: string
          readOnly: true
          default: stc_pay
          description: |-
            Indicates the form of payment used to process the transaction. This can be one of several options, including `apple_pay`, `google_pay`, `token_pay`, `stc_pay`, or `redirect`. It's important to note that the `redirect` option is only present in the `errorCallback`. In other scenarios, especially with `cancelCallback` and `successCallback`, it's absent. This is because, in the redirect flow, the customer is redirected to a different page where actions like payment cancellation or confirmation occur, not on the page where the SDK is displayed.

            * `apple_pay` - Apple Pay
            * `google_pay` - Google Pay
            * `token_pay` - Token Pay
            * `stc_pay` - STC Pay
            * `redirect` - Redirect
        challenge_occurred:
          type: boolean
          default: false
          description: This flag indicates if an additional verification, such as
            3DS, OTP, PIN, etc., was initiated during the payment process. Use this
            flag in cancelCallback and errorCallback to control the presentation of
            error messages, especially for on-site payments undergoing a challenge
            flow. For example, after a failed 3DS verification, it's useful to show
            a custom popup informing the user of the payment failure. However, it's
            crucial to note that not all on-site failed payments need custom error
            messaging. In cases like GooglePay or ApplePay, error messages are inherently
            handled by the Payment Sheet, which remains open for the user to retry,
            making this distinction vital.
        session_id:
          type: string
        order_no:
          type: string
          description: The unique identifier assigned to this payment transaction.
            It is used for tracking purposes and is set by the merchant or the system.
        reference_number:
          type: string
          description: The reference number.
      required:
      - form_of_payment
      - message
      - session_id
    STCSDKSuccessCallback:
      type: object
      description: Callback payload to be forwarder directly to `successCallback`
        SDK method.
      properties:
        message:
          type: string
          readOnly: true
          description: A concise description detailing the outcome of the operation.
            Suitable for presenting to the end-user if needed.
        form_of_payment:
          enum:
          - apple_pay
          - google_pay
          - token_pay
          - stc_pay
          - redirect
          type: string
          readOnly: true
          default: stc_pay
          description: |-
            Indicates the form of payment used to process the transaction. This can be one of several options, including `apple_pay`, `google_pay`, `token_pay`, `stc_pay`, or `redirect`. It's important to note that the `redirect` option is only present in the `errorCallback`. In other scenarios, especially with `cancelCallback` and `successCallback`, it's absent. This is because, in the redirect flow, the customer is redirected to a different page where actions like payment cancellation or confirmation occur, not on the page where the SDK is displayed.

            * `apple_pay` - Apple Pay
            * `google_pay` - Google Pay
            * `token_pay` - Token Pay
            * `stc_pay` - STC Pay
            * `redirect` - Redirect
        challenge_occurred:
          type: boolean
          default: false
          description: This flag indicates if an additional verification, such as
            3DS, OTP, PIN, etc., was initiated during the payment process. Use this
            flag in cancelCallback and errorCallback to control the presentation of
            error messages, especially for on-site payments undergoing a challenge
            flow. For example, after a failed 3DS verification, it's useful to show
            a custom popup informing the user of the payment failure. However, it's
            crucial to note that not all on-site failed payments need custom error
            messaging. In cases like GooglePay or ApplePay, error messages are inherently
            handled by the Payment Sheet, which remains open for the user to retry,
            making this distinction vital.
        session_id:
          type: string
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
        status:
          type: string
          readOnly: true
          default: success
          description: The payment is successful. `successCallback` must be triggered.
        order_no:
          type: string
          description: The unique identifier assigned to this payment transaction.
            It is used for tracking purposes and is set by the merchant or the system.
        reference_number:
          type: string
          description: This is a unique value associated with each payment attempt
            made by a customer. It serves as the unique identifier for the payment
            when sent to the Payment Gateway (PG). It can be used to identify a specific
            payment attempt within one session, allowing for multiple reference numbers
            per session_id.
        redirect_url:
          type: string
          format: uri
          readOnly: true
          description: The URL where the customer will be redirected after the payment
            stage only if the webhook URL returns a success status. `order_no`, `reference_number`
            and `session_id` will be appended to the redirect URL as query parameters.
        payment_gateway_info:
          $ref: '#/components/schemas/PaymentGatewayInfo'
      required:
      - form_of_payment
      - message
      - order_no
      - payment_gateway_info
      - redirect_url
      - reference_number
      - session_id
      - status
    SchemaWebhook:
      type: object
      properties:
        agreement:
          allOf:
          - $ref: '#/components/schemas/Agreement'
          readOnly: true
          description: "An established contractual arrangement with the payer, which\
            \ authorizes you to securely store and subsequently utilize their payment\
            \ information for specific purposes. This could encompass arrangements\
            \ like recurring payments for services such as mobile subscriptions, installment-based\
            \ payments for purchases, arrangements for ad-hoc charges like account\
            \ top-ups, or for standard industry practices like penalty charges for\
            \ missed appointments. \n\nNote: If your intention is solely to store\
            \ payment details for transactions initiated by the payer in the future,\
            \ then this parameter group should not be used."
        amount:
          type: string
          readOnly: true
          description: Denotes the total sum of the payment transaction, which encompasses
            the cost of the procured items or services, excluding any supplementary
            fees or charges.
        amount_details:
          allOf:
          - $ref: '#/components/schemas/AmountDetails'
          readOnly: true
          description: 'A comprehensive set of amount details includes: Currency Code,
            Amount, Total, Fee.'
        capture_delivery_address:
          type: boolean
          description: By enabling this, you will ask for user's address. If enabled,
            capture delivery coordinates should also be active.
        capture_delivery_location:
          type: boolean
          title: Capture delivery coordinates
          description: 'By enabling this, you will ask for user''s delivery location
            on a map. '
        card_acceptance_criteria:
          allOf:
          - $ref: '#/components/schemas/CardAcceptanceCriteria'
          readOnly: true
          description: |-
            This field allows you to define specific rules and conditions that a card must meet to be eligible for payment. These stipulations apply regardless of whether a customer chooses to pay using a saved card or opts to add a new card for the transaction. By leveraging the `card_acceptance_criteria`, you gain the power to fine-tune your payment processing strategy, tailoring acceptance rules to align with your business needs, security standards, and risk management policies.

            **Example**: If you run an exclusive service that caters predominantly to premium customers, you might set criteria that only allow transactions from high-tier credit cards like VISA Platinum. This ensures that payments align with the exclusivity and branding of your services. Remember to configure these criteria thoughtfully. Striking the right balance between security, risk mitigation, and user experience is paramount.

            **Note**: The `card_acceptance_criteria` field is applicable only for direct payments and not for hosted session payments.
        currency_code:
          type: string
          description: The specified currency represents the denomination of the transaction.Nevertheless,
            it doesn't necessarily mandate payment in this exact currency.Due to potential
            currency conversions or exchanges, the final charge may be in a different
            currency.
          maxLength: 3
          minLength: 3
        customer_address_city:
          type: string
          description: The city of the customer's billing address. This field may
            be used to send the billing address to the payment gateway.
          maxLength: 40
        customer_address_country:
          type: string
          description: The country of the customer's billing address, formatted as
            a two-letter ISO country code (e.g., 'US' for United States, 'CA' for
            Canada). This field may be used to send the billing address to the payment
            gateway.
          maxLength: 2
          minLength: 2
        customer_address_line1:
          type: string
          title: Customer address line 1
          description: The first line of the customer's billing street address. This
            field may be used to send the billing address to the payment gateway.
        customer_address_line2:
          type: string
          title: Customer address line 2
          description: The second line of the customer's billing street address, if
            available. This field may be used to provide additional address information,
            such as an apartment or suite number.
        customer_address_postal_code:
          type: string
          description: The postal code of the customer's billing address. This field
            may be used to send the billing address to the payment gateway.
          maxLength: 12
        customer_address_state:
          type: string
          description: The state or region of the customer's billing address. This
            field may be used to send the billing address to the payment gateway.
          maxLength: 40
        customer_email:
          type: string
          description: The email address of the customer that is used to send payment
            notifications and receipts, and can be used for fraud prevention. This
            field is mandatory and is always sent to the payment gateway. It may also
            be included in the invoice, receipt, email, and displayed on the payment
            page.
          maxLength: 128
        customer_first_name:
          type: string
          description: The first name of the recipient of the payment. This field
            is used for various communications such as the invoice, receipt, email,
            SMS, or displayed on the payment page. It may also be sent to the payment
            gateway if necessary.
          maxLength: 64
        customer_id:
          type: string
          description: The customer ID is a unique identifier for the customer within
            the merchant's system. It is also used as a merchant identifier for the
            customer and plays a critical role in tokenization. All the customer's
            cards will be associated with this ID.
          maxLength: 64
        customer_last_name:
          type: string
          description: The last name of the recipient of the payment. This field is
            used for various communications such as the invoice, receipt, email, SMS,
            or displayed on the payment page. It may also be sent to the payment gateway
            if necessary.
          maxLength: 64
        customer_phone:
          type: string
          description: Customer phone number associated with the payment. This might
            be sent to the payment gateway and depending on the gateway, it may trigger
            a click to pay process on the payment page. The phone number will also
            be included in the invoice, receipt, email, and displayed on the payment
            page.
          maxLength: 32
        extra:
          type: object
          additionalProperties: {}
          description: The extra information for the payment details, which the merchant
            has sent it in key value form.
        fee:
          type: string
          description: The fee denotes the sum the customer pays in their chosen payment
            currency. This may vary from the transaction's designated currency. The
            fee is computed once to maintain precision and uniformity throughout the
            payment procedure.
          readOnly: true
        gateway_account:
          type: string
          readOnly: true
          description: This code corresponds to the payment gateway and plays an essential
            role in facilitating payment transactions.
        gateway_name:
          type: string
          readOnly: true
          description: The name of the payment gateway service being utilized.
        gateway_response:
          type: object
          additionalProperties: {}
          description: This field stores the processed response received from the
            payment gateway and forwarded to Ottu.
          readOnly: true
        initiator:
          allOf:
          - $ref: '#/components/schemas/InitiatorUser'
          description: The user who initiated the creation of this payment transaction,
            if available. This field is optional and may be used to track who created
            the payment transaction. Note that if the payment transaction was created
            via the Checkout API using an API-Key, no initiator will be associated
            with the payment.
        is_sandbox:
          type: boolean
          title: Is Sandbox?
          description: Indicates whether the operation was performed in a test environment
            or not.
        message:
          type: string
          readOnly: true
          description: This represents the message, either transmitted by the Payment
            Gateway (PG) or established by Ottu, that provides a detailed illustration
            of the payment's current status.
        order_no:
          type: string
          nullable: true
          description: The unique identifier assigned to this payment transaction.
            It is used for tracking purposes and is set by the merchant or the system.
          maxLength: 128
        paid_amount:
          oneOf:
          - type: number
            format: double
          - type: string
          description: The paid amount encompasses fees or captured amounts from authorized
            transactions. This total is derived from the specified 'amount' field,
            converting foreign currencies to the default as necessary. This might
            result in minor variations due to fluctuations in exchange rates.
          readOnly: true
        payment_type:
          enum:
          - one_off
          - auto_debit
          type: string
          description: "Type of payment. Choose `one_off` for payments that occur\
            \ only once without future commitments. Choose `auto_debit` for payments\
            \ that are automatically deducted, such as recurring subscriptions, installments,\
            \ or unscheduled auto-debits. \n\nNOTE: If `auto_debit` is selected: \n\
            1. `agreement` and `customer_id` parameters will also be mandatory. \n\
            2. Only PG codes supporting tokenization can be selected. \nAs a side\
            \ effect, the card used for the payment will be associated with the supplied\
            \ `agreement.id`. This card will be locked, preventing the customer from\
            \ deleting it from the system until an alternate card is chosen for auto-debit\
            \ payments.\n\n* `one_off` - One Off\n* `auto_debit` - Auto Debit"
        reference_number:
          type: string
          readOnly: true
          description: An auto-generated internal identifier for this payment transaction.
            While this field may be used for tracking and reporting purposes, it is
            recommended to use the session_id field instead, as it provides the same
            functionality and more.
        refunded_amount:
          type: number
          format: double
          description: The total refunded amount for the payment transaction.
        remaining_amount:
          type: number
          format: double
          description: The residual amount due. Together with the editable amount,
            it indicates the outstanding balance of a transaction awaiting settlement.
          readOnly: true
        result:
          enum:
          - pending
          - success
          - failed
          - canceled
          - error
          - cod
          type: string
          description: Indicates the outcome of the operation. `success` denotes a
            successful operation.
          readOnly: true
        session_id:
          type: string
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
          maxLength: 128
        settled_amount:
          type: number
          format: double
          description: The amount that has been paid or authorized in its original
            currency, excluding any fees.
          readOnly: true
        signature:
          type: string
          readOnly: true
          description: 'Signature Field: A cryptographic hash used to guarantee data
            integrity and authenticity during client-server exchanges. This hash ensures
            that the API payload has not been tampered with, and can only be verified
            by authorized parties.'
        state:
          type: string
          readOnly: true
          description: The current state of the payment transaction, it helps to understand
            the progress of the payment.
        token:
          $ref: '#/components/schemas/Card'
        transaction_log_id:
          type: integer
          maximum: 4294967295
          minimum: 0
          format: int64
          nullable: true
          description: Identifies the transaction log associated with the payment
            transaction. A transaction log is created for each record that is dispatched
            during a bulk dispatch process.
        timestamp_utc:
          type: string
          format: date-time
          readOnly: true
          description: This field represents the timestamp at which ottu processed
            the transaction.While this often corresponds to the payment time,it's
            important to note that it might not always be the case.Payments can be
            acknowledged at a later time,so this timestamp might not align precisely
            with the actual payment time.
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/ChildPayment'
          description: A list of dictionaries is generated, each containing a concise
            summary of each child payment transaction that has been created.
        voided_amount:
          type: number
          format: double
          description: The total voided amount for the payment transaction.
      required:
      - agreement
      - amount
      - amount_details
      - card_acceptance_criteria
      - currency_code
      - customer_address_country
      - fee
      - gateway_account
      - gateway_name
      - gateway_response
      - message
      - paid_amount
      - reference_number
      - remaining_amount
      - result
      - settled_amount
      - signature
      - state
      - timestamp_utc
    ShippingAddress:
      type: object
      description: Nested serializer to save Address data into PaymentTransaction
      properties:
        line1:
          type: string
          maxLength: 128
        line2:
          type: string
          maxLength: 128
        city:
          type: string
          maxLength: 40
        state:
          type: string
          maxLength: 40
        country:
          enum:
          - AW
          - AF
          - AO
          - AI
          - AX
          - AL
          - AD
          - AE
          - AR
          - AM
          - AS
          - AQ
          - TF
          - AG
          - AU
          - AT
          - AZ
          - BI
          - BE
          - BJ
          - BQ
          - BF
          - BD
          - BG
          - BH
          - BS
          - BA
          - BL
          - BY
          - BZ
          - BM
          - BO
          - BR
          - BB
          - BN
          - BT
          - BV
          - BW
          - CF
          - CA
          - CC
          - CH
          - CL
          - CN
          - CI
          - CM
          - CD
          - CG
          - CK
          - CO
          - KM
          - CV
          - CR
          - CU
          - CW
          - CX
          - KY
          - CY
          - CZ
          - DE
          - DJ
          - DM
          - DK
          - DO
          - DZ
          - EC
          - EG
          - ER
          - EH
          - ES
          - EE
          - ET
          - FI
          - FJ
          - FK
          - FR
          - FO
          - FM
          - GA
          - GB
          - GE
          - GG
          - GH
          - GI
          - GN
          - GP
          - GM
          - GW
          - GQ
          - GR
          - GD
          - GL
          - GT
          - GF
          - GU
          - GY
          - HK
          - HM
          - HN
          - HR
          - HT
          - HU
          - ID
          - IM
          - IN
          - IO
          - IE
          - IR
          - IQ
          - IS
          - IL
          - IT
          - JM
          - JE
          - JO
          - JP
          - KZ
          - KE
          - KG
          - KH
          - KI
          - KN
          - KR
          - KW
          - LA
          - LB
          - LR
          - LY
          - LC
          - LI
          - LK
          - LS
          - LT
          - LU
          - LV
          - MO
          - MF
          - MA
          - MC
          - MD
          - MG
          - MV
          - MX
          - MH
          - MK
          - ML
          - MT
          - MM
          - ME
          - MN
          - MP
          - MZ
          - MR
          - MS
          - MQ
          - MU
          - MW
          - MY
          - YT
          - NA
          - NC
          - NE
          - NF
          - NG
          - NI
          - NU
          - NL
          - 'NO'
          - NP
          - NR
          - NZ
          - OM
          - PK
          - PA
          - PN
          - PE
          - PH
          - PW
          - PG
          - PL
          - PR
          - KP
          - PT
          - PY
          - PS
          - PF
          - QA
          - RE
          - RO
          - RU
          - RW
          - SA
          - SD
          - SN
          - SG
          - GS
          - SH
          - SJ
          - SB
          - SL
          - SV
          - SM
          - SO
          - PM
          - RS
          - SS
          - ST
          - SR
          - SK
          - SI
          - SE
          - SZ
          - SX
          - SC
          - SY
          - TC
          - TD
          - TG
          - TH
          - TJ
          - TK
          - TM
          - TL
          - TO
          - TT
          - TN
          - TR
          - TV
          - TW
          - TZ
          - UG
          - UA
          - UM
          - UY
          - US
          - UZ
          - VA
          - VC
          - VE
          - VG
          - VI
          - VN
          - VU
          - WF
          - WS
          - YE
          - ZA
          - ZM
          - ZW
          type: string
          description: |-
            * `AW` - Aruba
            * `AF` - Afghanistan
            * `AO` - Angola
            * `AI` - Anguilla
            * `AX` - Åland Islands
            * `AL` - Albania
            * `AD` - Andorra
            * `AE` - United Arab Emirates
            * `AR` - Argentina
            * `AM` - Armenia
            * `AS` - American Samoa
            * `AQ` - Antarctica
            * `TF` - French Southern Territories
            * `AG` - Antigua and Barbuda
            * `AU` - Australia
            * `AT` - Austria
            * `AZ` - Azerbaijan
            * `BI` - Burundi
            * `BE` - Belgium
            * `BJ` - Benin
            * `BQ` - Bonaire, Sint Eustatius and Saba
            * `BF` - Burkina Faso
            * `BD` - Bangladesh
            * `BG` - Bulgaria
            * `BH` - Bahrain
            * `BS` - Bahamas
            * `BA` - Bosnia and Herzegovina
            * `BL` - Saint Barthélemy
            * `BY` - Belarus
            * `BZ` - Belize
            * `BM` - Bermuda
            * `BO` - Bolivia, Plurinational State of
            * `BR` - Brazil
            * `BB` - Barbados
            * `BN` - Brunei Darussalam
            * `BT` - Bhutan
            * `BV` - Bouvet Island
            * `BW` - Botswana
            * `CF` - Central African Republic
            * `CA` - Canada
            * `CC` - Cocos (Keeling) Islands
            * `CH` - Switzerland
            * `CL` - Chile
            * `CN` - China
            * `CI` - Côte d'Ivoire
            * `CM` - Cameroon
            * `CD` - Congo, The Democratic Republic of the
            * `CG` - Congo
            * `CK` - Cook Islands
            * `CO` - Colombia
            * `KM` - Comoros
            * `CV` - Cabo Verde
            * `CR` - Costa Rica
            * `CU` - Cuba
            * `CW` - Curaçao
            * `CX` - Christmas Island
            * `KY` - Cayman Islands
            * `CY` - Cyprus
            * `CZ` - Czechia
            * `DE` - Germany
            * `DJ` - Djibouti
            * `DM` - Dominica
            * `DK` - Denmark
            * `DO` - Dominican Republic
            * `DZ` - Algeria
            * `EC` - Ecuador
            * `EG` - Egypt
            * `ER` - Eritrea
            * `EH` - Western Sahara
            * `ES` - Spain
            * `EE` - Estonia
            * `ET` - Ethiopia
            * `FI` - Finland
            * `FJ` - Fiji
            * `FK` - Falkland Islands (Malvinas)
            * `FR` - France
            * `FO` - Faroe Islands
            * `FM` - Micronesia, Federated States of
            * `GA` - Gabon
            * `GB` - United Kingdom
            * `GE` - Georgia
            * `GG` - Guernsey
            * `GH` - Ghana
            * `GI` - Gibraltar
            * `GN` - Guinea
            * `GP` - Guadeloupe
            * `GM` - Gambia
            * `GW` - Guinea-Bissau
            * `GQ` - Equatorial Guinea
            * `GR` - Greece
            * `GD` - Grenada
            * `GL` - Greenland
            * `GT` - Guatemala
            * `GF` - French Guiana
            * `GU` - Guam
            * `GY` - Guyana
            * `HK` - Hong Kong
            * `HM` - Heard Island and McDonald Islands
            * `HN` - Honduras
            * `HR` - Croatia
            * `HT` - Haiti
            * `HU` - Hungary
            * `ID` - Indonesia
            * `IM` - Isle of Man
            * `IN` - India
            * `IO` - British Indian Ocean Territory
            * `IE` - Ireland
            * `IR` - Iran, Islamic Republic of
            * `IQ` - Iraq
            * `IS` - Iceland
            * `IL` - Israel
            * `IT` - Italy
            * `JM` - Jamaica
            * `JE` - Jersey
            * `JO` - Jordan
            * `JP` - Japan
            * `KZ` - Kazakhstan
            * `KE` - Kenya
            * `KG` - Kyrgyzstan
            * `KH` - Cambodia
            * `KI` - Kiribati
            * `KN` - Saint Kitts and Nevis
            * `KR` - Korea, Republic of
            * `KW` - Kuwait
            * `LA` - Lao People's Democratic Republic
            * `LB` - Lebanon
            * `LR` - Liberia
            * `LY` - Libya
            * `LC` - Saint Lucia
            * `LI` - Liechtenstein
            * `LK` - Sri Lanka
            * `LS` - Lesotho
            * `LT` - Lithuania
            * `LU` - Luxembourg
            * `LV` - Latvia
            * `MO` - Macao
            * `MF` - Saint Martin (French part)
            * `MA` - Morocco
            * `MC` - Monaco
            * `MD` - Moldova, Republic of
            * `MG` - Madagascar
            * `MV` - Maldives
            * `MX` - Mexico
            * `MH` - Marshall Islands
            * `MK` - North Macedonia
            * `ML` - Mali
            * `MT` - Malta
            * `MM` - Myanmar
            * `ME` - Montenegro
            * `MN` - Mongolia
            * `MP` - Northern Mariana Islands
            * `MZ` - Mozambique
            * `MR` - Mauritania
            * `MS` - Montserrat
            * `MQ` - Martinique
            * `MU` - Mauritius
            * `MW` - Malawi
            * `MY` - Malaysia
            * `YT` - Mayotte
            * `NA` - Namibia
            * `NC` - New Caledonia
            * `NE` - Niger
            * `NF` - Norfolk Island
            * `NG` - Nigeria
            * `NI` - Nicaragua
            * `NU` - Niue
            * `NL` - Netherlands
            * `NO` - Norway
            * `NP` - Nepal
            * `NR` - Nauru
            * `NZ` - New Zealand
            * `OM` - Oman
            * `PK` - Pakistan
            * `PA` - Panama
            * `PN` - Pitcairn
            * `PE` - Peru
            * `PH` - Philippines
            * `PW` - Palau
            * `PG` - Papua New Guinea
            * `PL` - Poland
            * `PR` - Puerto Rico
            * `KP` - Korea, Democratic People's Republic of
            * `PT` - Portugal
            * `PY` - Paraguay
            * `PS` - Palestine, State of
            * `PF` - French Polynesia
            * `QA` - Qatar
            * `RE` - Réunion
            * `RO` - Romania
            * `RU` - Russian Federation
            * `RW` - Rwanda
            * `SA` - Saudi Arabia
            * `SD` - Sudan
            * `SN` - Senegal
            * `SG` - Singapore
            * `GS` - South Georgia and the South Sandwich Islands
            * `SH` - Saint Helena, Ascension and Tristan da Cunha
            * `SJ` - Svalbard and Jan Mayen
            * `SB` - Solomon Islands
            * `SL` - Sierra Leone
            * `SV` - El Salvador
            * `SM` - San Marino
            * `SO` - Somalia
            * `PM` - Saint Pierre and Miquelon
            * `RS` - Serbia
            * `SS` - South Sudan
            * `ST` - Sao Tome and Principe
            * `SR` - Suriname
            * `SK` - Slovakia
            * `SI` - Slovenia
            * `SE` - Sweden
            * `SZ` - Eswatini
            * `SX` - Sint Maarten (Dutch part)
            * `SC` - Seychelles
            * `SY` - Syrian Arab Republic
            * `TC` - Turks and Caicos Islands
            * `TD` - Chad
            * `TG` - Togo
            * `TH` - Thailand
            * `TJ` - Tajikistan
            * `TK` - Tokelau
            * `TM` - Turkmenistan
            * `TL` - Timor-Leste
            * `TO` - Tonga
            * `TT` - Trinidad and Tobago
            * `TN` - Tunisia
            * `TR` - Turkey
            * `TV` - Tuvalu
            * `TW` - Taiwan, Province of China
            * `TZ` - Tanzania, United Republic of
            * `UG` - Uganda
            * `UA` - Ukraine
            * `UM` - United States Minor Outlying Islands
            * `UY` - Uruguay
            * `US` - United States
            * `UZ` - Uzbekistan
            * `VA` - Holy See (Vatican City State)
            * `VC` - Saint Vincent and the Grenadines
            * `VE` - Venezuela, Bolivarian Republic of
            * `VG` - Virgin Islands, British
            * `VI` - Virgin Islands, U.S.
            * `VN` - Viet Nam
            * `VU` - Vanuatu
            * `WF` - Wallis and Futuna
            * `WS` - Samoa
            * `YE` - Yemen
            * `ZA` - South Africa
            * `ZM` - Zambia
            * `ZW` - Zimbabwe
        postal_code:
          type: string
          maxLength: 12
        first_name:
          type: string
          maxLength: 64
        last_name:
          type: string
          maxLength: 64
        email:
          type: string
          format: email
          maxLength: 128
        phone:
          type: string
          maxLength: 16
      required:
      - city
      - country
      - email
      - first_name
      - last_name
      - line1
      - phone
      - postal_code
    SubmitSTCPaymentRequest:
      type: object
      properties:
        session_id:
          type: string
          description: A unique identifier for each payment transaction, used to maintain
            the session state during the payment process.
          maxLength: 128
        otp:
          type: string
          description: The OTP (One-Time Password) is a mandatory field used to authorize
            STC payment transactions.
          maxLength: 12
      required:
      - otp
      - session_id
    SubmitToken:
      type: object
      description: |-
        This serializer is responsible for validating the data sent by the SDK
        when the user submits the token.
      properties:
        merchant_id:
          type: string
          description: The unique identifier of the merchant. Provided in CheckoutSDK
            init `merchant_id`.
        payment_method:
          enum:
          - card
          - token
          type: string
          description: |-
            Choose `card` for new card details or `token` for a saved customer card when processing a payment in the API request.

            * `card` - Card
            * `token` - Token
        session_id:
          type: string
          description: The unique identifier of the payment session. Provided in CheckoutSDK
            init `session_id`.
        token:
          type: string
          description: Use this field to provide the unique identifier of a saved
            customer card for processing a payment in the API request.
        cvv:
          type: string
          description: Input the 3 or 4-digit Card Verification Value (CVV) found
            on the back of the credit/debit card. This may be required for new card
            transactions or certain token transactions to verify the card's authenticity.
          pattern: ^\d{3,4}$
      required:
      - merchant_id
      - payment_method
      - session_id
      - token
    ThreeDSResponse:
      type: object
      properties:
        status:
          type: string
          readOnly: true
          default: 3DS
          description: The payment is in 3DSecure process. `html` must be displayed
            to the customer in the iframe.
        html:
          type: string
          readOnly: true
          description: The HTML code to be displayed in the iframe.
        reference_number:
          type: string
          description: This is a unique value associated with each payment attempt
            made by a customer. It serves as the unique identifier for the payment
            when sent to the Payment Gateway (PG). It can be used to identify a specific
            payment attempt within one session, allowing for multiple reference numbers
            per session_id.
        ws_url:
          type: string
          format: uri
          readOnly: true
          description: The Websocket URL to be used for 3DSecure process. A connection
            must be established with this URL and upon the 3DS process is completed,
            the backend will notify there.
      required:
      - html
      - reference_number
      - status
      - ws_url
    Token:
      type: object
      properties:
        paymentData:
          $ref: '#/components/schemas/ApplePayPaymentData'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        transactionIdentifier:
          type: string
      required:
      - paymentData
      - paymentMethod
      - transactionIdentifier
    UnifiedUIInvoice:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        status:
          enum:
          - sent
          - paid
          - overdue
          - canceled
          type: string
          description: |-
            Current status of the invoice. Can be one of the following: `sent`, `paid`, `overdue`, `canceled`.

            * `sent` - Sent
            * `paid` - Paid
            * `overdue` - Overdue
            * `canceled` - Canceled
        is_deleted:
          type: boolean
          title: Is Deleted?
          description: Mark true to transfer this invoice to archived list.
        txn:
          type: string
        txn_type:
          type: string
        txn_session_id:
          type: string
        invoice_number:
          type: string
          description: A unique identifier for the invoice, typically used for tracking
            and referencing purposes.
          maxLength: 255
        invoice_date:
          type: string
          format: date
          readOnly: true
          description: The date when the invoice was issued to the customer.
        due_date:
          type: string
          format: date
          nullable: true
          description: The date by which the customer is expected to make payment
            for the invoice.
        tax_rate:
          type: string
          title: Tax
          description: The tax rate applied to the invoice, expressed as a percentage.
          maxLength: 8
        tax_amount:
          type: string
          description: The total amount of tax applied to the invoice.
          maxLength: 20
        discount_percentage:
          type: string
          nullable: true
          description: The percentage-based discount applied to the full invoice amount,
            including taxes. If set, the discount_amount field will be automatically
            calculated. Both discount_amount and discount_percentage cannot be set
            simultaneously. The discount cannot be higher than the `total_excl_tax`
            field.
          maxLength: 8
        discount_amount:
          type: string
          nullable: true
          description: The fixed amount discount applied to the full invoice amount,
            including taxes. If set, the discount_percentage field will be set to
            null. Both discount_amount and discount_percentage cannot be set simultaneously.
            The discount cannot be higher than the `total_excl_tax` field.
          maxLength: 20
        shipping_tax_rate:
          type: string
          description: 'The tax rate applied to the shipping cost, expressed as a
            percentage. '
          maxLength: 20
        shipping_incl_tax:
          type: string
          title: Shipping Incl. Tax
          description: The cost of shipping for the invoice, including all applicable
            taxes.
          maxLength: 20
        shipping_excl_tax:
          type: string
          title: Shipping Excl. Tax
          description: The cost of shipping for the invoice, excluding taxes.
          maxLength: 20
        shipping_method:
          type: string
          description: The method or service used for shipping the items associated
            with the invoice.
          maxLength: 255
        subtotal:
          type: string
          description: Sum of total_incl_tax's of all invoice items.
          maxLength: 20
        total_excl_tax:
          type: string
          title: Total Excl. Tax
          description: The total amount of the invoice, excluding taxes.
          maxLength: 20
        total_incl_tax:
          type: string
          title: Total Incl. Tax
          description: The total amount of the invoice, including all applicable taxes.
          maxLength: 20
        invoice_items:
          type: array
          items:
            $ref: '#/components/schemas/UnifiedUIInvoiceItem'
        currency_code:
          type: string
        customer_full_name:
          type: string
        company_name:
          type: string
        invoice_pdf_url:
          type: string
          format: uri
          title: Invoice short url
          description: A short URL that links to the invoice pdf file. This URL may
            be included in email/sms notifications sent to the customer regarding
            their payment or displayed on the checkout page to allow the customer
            to easily access their invoice.
          maxLength: 5000
      required:
      - company_name
      - currency_code
      - customer_full_name
      - id
      - invoice_date
      - invoice_items
      - invoice_number
      - shipping_excl_tax
      - shipping_incl_tax
      - shipping_tax_rate
      - subtotal
      - total_excl_tax
      - total_incl_tax
      - txn
      - txn_session_id
      - txn_type
    UnifiedUIInvoiceItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        sku:
          type: string
          description: Unique identifier for the invoice item.
          maxLength: 255
        description:
          type: string
          description: Product name or a brief description of the item.
          maxLength: 255
        quantity:
          type: string
          description: Number of units of the product.
          maxLength: 20
        unit_price:
          type: string
          description: Price per unit of the product, excluding tax.
          maxLength: 20
        tax_rate:
          type: string
          title: Tax
          description: Tax rate applied to the invoice item.
          maxLength: 8
        tax_amount:
          type: string
          description: Total tax amount for the invoice item.
          maxLength: 20
        discount_percentage:
          type: string
          description: Percentage-based discount applied to the invoice item. The
            calculated discount cannot exceed theitem's total value, including tax.
          maxLength: 8
        discount_amount:
          type: string
          description: Fixed amount discount applied to the invoice item. The discount
            cannot exceed the item's total value, including tax.
          maxLength: 20
        total_excl_tax:
          type: string
          title: Total Excl. Tax
          description: Total value of the invoice item, excluding tax. This is calculated
            as (unit_price * quantity) - discount.
          maxLength: 20
        total_incl_tax:
          type: string
          title: Total Incl. Tax
          description: Total value of the invoice item, including tax. This is calculated
            as (unit_price * quantity) - discount + applicable tax.
          maxLength: 20
      required:
      - description
      - id
      - quantity
      - sku
      - total_excl_tax
      - total_incl_tax
      - unit_price
    Unit:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
        slug:
          type: string
      required:
      - id
      - slug
      - title
    UserCards:
      type: object
      properties:
        type:
          enum:
          - sandbox
          - production
          type: string
          description: |-
            Choose between `sandbox` and `production`. Select sandbox to retrieve cards created for test Payment Gateway MIDs, or production to fetch real cards used in live transactions.

            * `sandbox` - Sandbox
            * `production` - Production
        customer_id:
          type: string
          description: Retrieve cards associated with a specific customer using their
            unique customer_id.
        pg_codes:
          type: array
          items: {}
          description: Specify the `pg_code` if you want to retrieve cards for a particular
            payment gateway, such as `credit-card`. The pg_code is initialized in
            the `Checkout API` when the `session_id` is created, with each card being
            associated with a single payment gateway/pg_code.
        agreement_id:
          type: string
          description: Retrieve the card associated with a specific agreement ID.
            When this parameter is provided, the resulting array will contain a maximum
            of one entry, representing the latest card the customer has used for the
            auto-debit payment associated with the given agreement ID.
      required:
      - customer_id
      - type
  securitySchemes:
    SSO BasicAuth:
      type: http
      scheme: basic
    SSO JWT Auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    basicAuth:
      type: http
      scheme: basic
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
